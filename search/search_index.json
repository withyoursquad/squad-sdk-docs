{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Squad SDK Documentation","text":"<p>Welcome to the documentation for the Squad SDK! This comprehensive guide covers everything you need to integrate Squad's social features, voice calling, and interactive elements into your mobile applications.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Squad SDK Overview</li> <li>Key Concepts</li> <li>iOS Quick Start</li> <li>Android Quick Start</li> <li>React Native Quick Start (coming soon)</li> </ul>"},{"location":"#core-implementation","title":"Core Implementation","text":""},{"location":"#sdk-integration","title":"SDK Integration","text":"<ul> <li>SDK Initialization</li> <li>User Authentication</li> <li>WebView Integration</li> <li>Squad Experience</li> </ul>"},{"location":"#platform-specific-guides","title":"Platform-Specific Guides","text":""},{"location":"#ios-implementation","title":"iOS Implementation","text":"<ul> <li>Installation &amp; Setup</li> <li>Configuration Guide</li> <li>WebView Integration</li> </ul>"},{"location":"#android-implementation","title":"Android Implementation","text":"<ul> <li>Installation &amp; Setup</li> <li>Configuration Guide</li> <li>WebView Management</li> </ul>"},{"location":"#troubleshooting-support","title":"Troubleshooting &amp; Support","text":"<ul> <li>General Troubleshooting</li> </ul>"},{"location":"#additional-resources","title":"Additional Resources","text":"<ul> <li>FAQ</li> <li>Support Contact</li> </ul>"},{"location":"#release-information","title":"Release Information","text":"<ul> <li>iOS SDK Releases</li> <li>Android SDK Releases</li> </ul>"},{"location":"installation/","title":"Installation &amp; Setup","text":"<p>This guide provides comprehensive installation and setup instructions for the Squad SDK across supported platforms.</p>"},{"location":"installation/#platform-requirements","title":"Platform Requirements","text":""},{"location":"installation/#ios-requirements","title":"iOS Requirements","text":"<ul> <li>iOS 13.0 or later</li> <li>Xcode 13.0 or later</li> <li>Swift 5.3 or later</li> <li>Valid Apple Developer account</li> <li>Minimum deployment target iOS 13.0</li> </ul>"},{"location":"installation/#android-requirements","title":"Android Requirements","text":"<ul> <li>Android API level 21 (Android 5.0) or higher</li> <li>Android Studio Arctic Fox (2020.3.1) or newer</li> <li>Kotlin 1.5.0 or later</li> <li>Gradle 7.0 or higher</li> <li>Java 8 or higher</li> </ul>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before starting the installation:</p> <ol> <li> <p>Developer Account Setup</p> </li> <li> <p>Create a Squad developer account at developer.squadforsports.com</p> </li> <li>Generate your organization ID and API key</li> <li> <p>Note your credentials for SDK initialization</p> </li> <li> <p>Project Preparation</p> </li> <li>Ensure your project meets minimum platform requirements</li> <li>Verify you have necessary development environment setup</li> <li>Check network connectivity for package downloads</li> </ol>"},{"location":"installation/#platform-specific-installation","title":"Platform-Specific Installation","text":""},{"location":"installation/#ios-installation","title":"iOS Installation","text":""},{"location":"installation/#swift-package-manager-recommended","title":"Swift Package Manager (Recommended)","text":"<pre><code>// In Xcode:\n// File &gt; Add Package Dependencies\n// Enter: https://github.com/withyoursquad/squad-sports-ios.git\n</code></pre>"},{"location":"installation/#cocoapods","title":"CocoaPods","text":"<pre><code>pod 'SquadSDK', '~&gt; 1.0.0'\n</code></pre> <p>Detailed iOS Installation Guide \u2192</p>"},{"location":"installation/#android-installation","title":"Android Installation","text":""},{"location":"installation/#gradle-setup","title":"Gradle Setup","text":"<pre><code>// Project build.gradle\nrepositories {\n    mavenCentral()\n}\n\n// App build.gradle\ndependencies {\n    implementation 'com.withyoursquad.sdk:squadline:1.0.0'\n}\n</code></pre> <p>Detailed Android Installation Guide \u2192</p>"},{"location":"installation/#basic-integration-steps","title":"Basic Integration Steps","text":"<ol> <li>SDK Initialization</li> </ol> <pre><code>// iOS\nimport SquadSDK\n\nSquadSDK.initialize(\n    organizationId: \"YOUR_ORG_ID\",\n    apiKey: \"YOUR_API_KEY\"\n)\n</code></pre> <pre><code>// Android\nimport com.withyoursquad.sdk.SquadSDK\n\nSquadSDK.Builder(context)\n    .setOrganizationId(\"YOUR_ORG_ID\")\n    .setApiKey(\"YOUR_API_KEY\")\n    .build()\n    .initialize()\n</code></pre> <ol> <li>User Authentication</li> </ol> <pre><code>// iOS\ntry squadSDK.authenticateUser(\n    identifier: \"user@example.com\",\n    authType: .email\n)\n</code></pre> <pre><code>// Android\nsquadSDK.authenticateUser(\n    identifier = \"user@example.com\",\n    authType = AuthType.EMAIL\n)\n</code></pre> <ol> <li>WebView Integration</li> </ol> <pre><code>// iOS\nlet webView = try squadSDK.presentWebView()\nview.addSubview(webView)\n</code></pre> <pre><code>// Android\nval webView = squadSDK.presentWebView(this)\nsetContentView(webView)\n</code></pre>"},{"location":"installation/#required-permissions","title":"Required Permissions","text":""},{"location":"installation/#ios","title":"iOS","text":"<p>Add to Info.plist:</p> <pre><code>&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;\n&lt;string&gt;Squad needs microphone access for voice calls&lt;/string&gt;\n</code></pre>"},{"location":"installation/#android","title":"Android","text":"<p>Add to AndroidManifest.xml:</p> <pre><code>&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n&lt;uses-permission android:name=\"android.permission.RECORD_AUDIO\" /&gt;\n</code></pre>"},{"location":"installation/#verification-steps","title":"Verification Steps","text":"<ol> <li> <p>Check SDK Installation</p> </li> <li> <p>Verify build success</p> </li> <li>Check for any dependency conflicts</li> <li> <p>Ensure proper permissions setup</p> </li> <li> <p>Verify Initialization</p> </li> <li> <p>Test SDK initialization</p> </li> <li>Validate API credentials</li> <li> <p>Check debug logs</p> </li> <li> <p>Test Basic Features</p> </li> <li>Verify WebView loading</li> <li>Test user authentication</li> <li>Check voice permissions</li> </ol>"},{"location":"installation/#common-issues","title":"Common Issues","text":""},{"location":"installation/#ios-common-issues","title":"iOS Common Issues","text":"<ol> <li> <p>CocoaPods Integration</p> </li> <li> <p>Run <code>pod repo update</code></p> </li> <li>Check Podfile syntax</li> <li> <p>Verify minimum iOS version</p> </li> <li> <p>SPM Integration</p> </li> <li>Clear derived data</li> <li>Check package resolution</li> <li>Verify Xcode version</li> </ol>"},{"location":"installation/#android-common-issues","title":"Android Common Issues","text":"<ol> <li> <p>Gradle Sync</p> </li> <li> <p>Check Gradle version</p> </li> <li>Verify repository access</li> <li> <p>Update Gradle plugin</p> </li> <li> <p>ProGuard Configuration</p> </li> <li>Add required rules</li> <li>Check mapping file</li> <li>Verify release build</li> </ol>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<ol> <li> <p>Configuration</p> </li> <li> <p>iOS Configuration Guide</p> </li> <li> <p>Android Configuration Guide</p> </li> <li> <p>WebView Setup</p> </li> <li> <p>iOS WebView Management</p> </li> <li> <p>Android WebView Management</p> </li> <li> <p>Authentication</p> </li> <li>User Authentication Guide</li> </ol>"},{"location":"installation/#additional-resources","title":"Additional Resources","text":"<ul> <li>Sample Projects</li> <li>Troubleshooting Guide</li> </ul>"},{"location":"installation/#support","title":"Support","text":"<p>If you encounter any issues during installation:</p> <ul> <li>Review our Troubleshooting Guide</li> <li>Visit Support Center</li> <li>Contact support at support@squadforsports.com</li> <li>Check Documentation</li> </ul> <p>Remember to reference platform-specific guides for detailed setup instructions and advanced configurations.</p>"},{"location":"overview/","title":"Squad SDK Overview","text":"<p>The Squad SDK enables developers to integrate Squad's social features and voice calling capabilities into mobile applications. By leveraging the SDK, apps can provide users with a seamless and interactive social experience, including freestyles, polls, squad management, and real-time voice communication.</p>"},{"location":"overview/#key-features","title":"Key Features","text":"<ul> <li>Easy initialization with organization ID and API key</li> <li>Flexible authentication using email or access tokens</li> <li>Seamless WebView integration</li> <li>Comprehensive social features:</li> <li>Freestyles for creative expression</li> <li>Interactive polls</li> <li>Squad and friend management</li> <li>Real-time voice calling with custom emojis</li> <li>Voice messaging</li> <li>Cross-platform support for iOS, Android, and React Native</li> <li>Robust security and performance optimizations</li> </ul>"},{"location":"overview/#getting-started","title":"Getting Started","text":"<p>To integrate the Squad SDK into your app:</p> <ol> <li>Sign up for a Squad developer account to obtain credentials</li> <li>Follow the platform-specific installation guides:</li> <li>iOS Integration Guide</li> <li>Android Integration Guide</li> <li>React Native Integration Guide (coming soon)</li> <li>Configure the SDK using our detailed guides</li> <li>Implement user authentication</li> <li>Integrate the Squad WebView experience</li> </ol>"},{"location":"overview/#core-documentation","title":"Core Documentation","text":""},{"location":"overview/#setup-and-configuration","title":"Setup and Configuration","text":"<ul> <li>Installation &amp; Setup</li> <li>SDK Initialization</li> <li>User Authentication</li> </ul>"},{"location":"overview/#webview-integration","title":"WebView Integration","text":"<ul> <li>WebView Management</li> </ul>"},{"location":"overview/#platform-specific-guides","title":"Platform-Specific Guides","text":""},{"location":"overview/#ios","title":"iOS","text":"<ul> <li>iOS Installation</li> <li>iOS Configuration</li> <li>iOS WebView Management</li> <li>Build Optimization</li> </ul>"},{"location":"overview/#android","title":"Android","text":"<ul> <li>Android Installation</li> <li>Android Configuration</li> <li>Android WebView Management</li> <li>ProGuard Configuration</li> </ul>"},{"location":"overview/#implementation-resources","title":"Implementation Resources","text":"<ul> <li>Sample Projects</li> <li>Integration Examples</li> </ul>"},{"location":"overview/#support-and-resources","title":"Support and Resources","text":"<ul> <li>Documentation Home</li> <li>Troubleshooting Guide</li> <li>Sample Projects</li> <li>Support: support@squadforsports.com</li> <li>Documentation: https://docs.squadforsports.com</li> </ul> <p>Whether you're building a new integration or enhancing an existing one, our comprehensive documentation will guide you through creating engaging social experiences with the Squad SDK.</p>"},{"location":"sdk-init/","title":"SDK Initialization","text":"<p>Before you can start using the Squad SDK in your app, you need to initialize it with your organization credentials. This process involves obtaining an organization ID and API key from your Squad developer account and passing them to the SDK during initialization.</p>"},{"location":"sdk-init/#obtaining-credentials","title":"Obtaining Credentials","text":"<p>To get your organization ID and API key:</p> <ol> <li>Sign up for a Squad developer account at https://developer.squadforsports.com</li> <li>Once logged in, navigate to the \"Organization Settings\" page</li> <li>Copy your \"Organization ID\" and \"API Key\" from the settings page</li> </ol> <p>Make sure to keep your API key secure and never expose it in client-side code or public repositories.</p>"},{"location":"sdk-init/#initializing-the-sdk","title":"Initializing the SDK","text":"<p>The process of initializing the Squad SDK varies slightly depending on the platform you're using. Here are the basic steps for each platform:</p>"},{"location":"sdk-init/#ios","title":"iOS","text":"<pre><code>import SquadSDK\n\nlet organizationId = \"YOUR_ORGANIZATION_ID\"\nlet apiKey = \"YOUR_API_KEY\"\n\nlet squadSDK = SquadSDK(organizationId: organizationId, apiKey: apiKey)\n\ndo {\n    try squadSDK.initialize()\n    print(\"Squad SDK initialized successfully\")\n} catch {\n    print(\"Failed to initialize Squad SDK: \\(error)\")\n}\n</code></pre>"},{"location":"sdk-init/#android","title":"Android","text":"<pre><code>import com.withyoursquad.sdk.SquadSDK\n\nval organizationId = \"YOUR_ORGANIZATION_ID\"\nval apiKey = \"YOUR_API_KEY\"\n\nval squadSDK = SquadSDK(context, organizationId, apiKey)\n\ntry {\n    squadSDK.initialize()\n    println(\"Squad SDK initialized successfully\")\n} catch (e: Exception) {\n    println(\"Failed to initialize Squad SDK: $e\")\n}\n</code></pre>"},{"location":"sdk-init/#react-native","title":"React Native","text":"<pre><code>import { SquadSDK } from \"@withyoursquad/react-native-sdk\";\n\nconst organizationId = \"YOUR_ORGANIZATION_ID\";\nconst apiKey = \"YOUR_API_KEY\";\n\nconst squadSDK = new SquadSDK(organizationId, apiKey);\n\ntry {\n  await squadSDK.initialize();\n  console.log(\"Squad SDK initialized successfully\");\n} catch (error) {\n  console.error(\"Failed to initialize Squad SDK:\", error);\n}\n</code></pre> <p>After initializing the SDK, you can proceed with authenticating users and presenting the Squad WebView to display the social features in your app.</p> <p>For more detailed information on SDK initialization, refer to the platform-specific guides:</p> <ul> <li>iOS SDK Initialization Guide</li> <li>Android SDK Initialization Guide</li> <li>React Native SDK Initialization Guide</li> </ul>"},{"location":"squad-experience/","title":"Coming Soon","text":""},{"location":"squad-line/","title":"Coming Soon","text":""},{"location":"troubleshooting/","title":"Squad SDK Troubleshooting Guide","text":"<p>This guide covers common issues, solutions, and best practices for troubleshooting the Squad SDK across all supported platforms.</p>"},{"location":"troubleshooting/#common-issues","title":"Common Issues","text":""},{"location":"troubleshooting/#sdk-initialization","title":"SDK Initialization","text":""},{"location":"troubleshooting/#issue-sdk-initialization-failure","title":"Issue: SDK Initialization Failure","text":"<pre><code>Error: Squad SDK initialization failed\n</code></pre> <p>Possible Causes:</p> <ul> <li>Invalid API credentials</li> <li>Network connectivity issues</li> <li>Incorrect initialization order</li> <li>Missing configuration</li> </ul> <p>Solutions:</p> <ol> <li>Verify API credentials</li> <li>Check network connectivity</li> <li>Ensure proper initialization sequence</li> <li>Verify configuration parameters</li> </ol>"},{"location":"troubleshooting/#authentication","title":"Authentication","text":""},{"location":"troubleshooting/#issue-authentication-failures","title":"Issue: Authentication Failures","text":"<pre><code>Error: Authentication failed: Invalid credentials\n</code></pre> <p>Common Causes:</p> <ul> <li>Expired tokens</li> <li>Invalid email format</li> <li>Network timeout</li> <li>Server connectivity issues</li> </ul> <p>Solutions:</p> <ol> <li>Verify token validity</li> <li>Check email format</li> <li>Implement retry logic</li> <li>Monitor network status</li> </ol>"},{"location":"troubleshooting/#webview-integration","title":"WebView Integration","text":""},{"location":"troubleshooting/#issue-webview-loading-failures","title":"Issue: WebView Loading Failures","text":"<pre><code>Error: Failed to load Squad WebView\n</code></pre> <p>Common Causes:</p> <ul> <li>Memory constraints</li> <li>Network connectivity</li> <li>Invalid configuration</li> <li>Resource loading failures</li> </ul> <p>Solutions:</p> <ol> <li>Monitor memory usage</li> <li>Check network connectivity</li> <li>Verify WebView configuration</li> <li>Implement proper error handling</li> </ol>"},{"location":"troubleshooting/#network-issues","title":"Network Issues","text":""},{"location":"troubleshooting/#connection-problems","title":"Connection Problems","text":""},{"location":"troubleshooting/#symptoms","title":"Symptoms:","text":"<ul> <li>Timeout errors</li> <li>Network unreachable</li> <li>SSL/TLS errors</li> </ul>"},{"location":"troubleshooting/#solutions","title":"Solutions:","text":"<ol> <li>Implement network status monitoring:</li> </ol> <pre><code>// iOS\nNetworkReachability.shared.monitor { status in\n    switch status {\n    case .connected:\n        // Handle connected state\n    case .disconnected:\n        // Handle disconnected state\n    }\n}\n</code></pre> <pre><code>// Android\nNetworkCallback().apply {\n    onAvailable { /* Handle connected state */ }\n    onLost { /* Handle disconnected state */ }\n}\n</code></pre> <ol> <li>Configure proper timeout values:</li> </ol> <pre><code>// Example configuration\nlet config = NetworkConfig(\n    connectionTimeout: 30,\n    readTimeout: 30,\n    writeTimeout: 30\n)\n</code></pre>"},{"location":"troubleshooting/#certificate-issues","title":"Certificate Issues","text":""},{"location":"troubleshooting/#symptoms_1","title":"Symptoms:","text":"<ul> <li>SSL handshake failures</li> <li>Certificate validation errors</li> </ul>"},{"location":"troubleshooting/#solutions_1","title":"Solutions:","text":"<ol> <li>Verify certificate pinning configuration</li> <li>Check SSL certificate validity</li> <li>Implement proper error handling</li> </ol>"},{"location":"troubleshooting/#voice-call-issues","title":"Voice Call Issues","text":""},{"location":"troubleshooting/#audio-problems","title":"Audio Problems","text":""},{"location":"troubleshooting/#symptoms_2","title":"Symptoms:","text":"<ul> <li>No audio</li> <li>Poor audio quality</li> <li>Echo/feedback</li> </ul>"},{"location":"troubleshooting/#solutions_2","title":"Solutions:","text":"<ol> <li>Check permissions</li> <li>Verify audio session configuration</li> <li>Monitor call quality metrics</li> <li>Implement audio routing logic</li> </ol>"},{"location":"troubleshooting/#call-connection-issues","title":"Call Connection Issues","text":""},{"location":"troubleshooting/#symptoms_3","title":"Symptoms:","text":"<ul> <li>Call setup failure</li> <li>Dropped calls</li> <li>Connection timeout</li> </ul>"},{"location":"troubleshooting/#solutions_3","title":"Solutions:","text":"<ol> <li>Verify network stability</li> <li>Check WebRTC configuration</li> <li>Monitor connection state</li> <li>Implement reconnection logic</li> </ol>"},{"location":"troubleshooting/#memory-management","title":"Memory Management","text":""},{"location":"troubleshooting/#memory-warnings","title":"Memory Warnings","text":""},{"location":"troubleshooting/#symptoms_4","title":"Symptoms:","text":"<ul> <li>App termination</li> <li>Performance degradation</li> <li>WebView reloads</li> </ul>"},{"location":"troubleshooting/#solutions_4","title":"Solutions:","text":"<ol> <li>Implement memory warning handlers</li> <li>Clear caches when appropriate</li> <li>Monitor memory usage</li> <li>Implement cleanup routines</li> </ol>"},{"location":"troubleshooting/#resource-leaks","title":"Resource Leaks","text":""},{"location":"troubleshooting/#symptoms_5","title":"Symptoms:","text":"<ul> <li>Increasing memory usage</li> <li>Degraded performance</li> <li>Background resource usage</li> </ul>"},{"location":"troubleshooting/#solutions_5","title":"Solutions:","text":"<ol> <li>Implement proper cleanup</li> <li>Monitor resource usage</li> <li>Handle lifecycle events</li> <li>Release unused resources</li> </ol>"},{"location":"troubleshooting/#best-practices","title":"Best Practices","text":""},{"location":"troubleshooting/#error-handling","title":"Error Handling","text":"<ol> <li>Implement Comprehensive Error Handling</li> </ol> <pre><code>func handleError(_ error: SquadError) {\n    switch error {\n    case .network(let networkError):\n        handleNetworkError(networkError)\n    case .authentication(let authError):\n        handleAuthError(authError)\n    case .webView(let webViewError):\n        handleWebViewError(webViewError)\n    }\n}\n</code></pre> <ol> <li>Log Relevant Information</li> </ol> <pre><code>func logError(_ error: Error) {\n    Logger.error(\"\"\"\n        Error: \\(error.localizedDescription)\n        Code: \\(error.code)\n        Context: \\(error.context)\n        Timestamp: \\(Date())\n        \"\"\"\n    )\n}\n</code></pre>"},{"location":"troubleshooting/#monitoring","title":"Monitoring","text":"<ol> <li> <p>Track Key Metrics</p> </li> <li> <p>Network performance</p> </li> <li>Memory usage</li> <li>Error rates</li> <li> <p>User engagement</p> </li> <li> <p>Implement Analytics</p> </li> </ol> <pre><code>func trackEvent(_ event: SquadEvent) {\n    Analytics.log(\n        event: event.name,\n        parameters: event.parameters\n    )\n}\n</code></pre>"},{"location":"troubleshooting/#debug-tools","title":"Debug Tools","text":""},{"location":"troubleshooting/#sdk-logging","title":"SDK Logging","text":"<p>Enable detailed logging:</p> <pre><code>SquadSDK.setLogLevel(.debug)\n</code></pre>"},{"location":"troubleshooting/#network-monitoring","title":"Network Monitoring","text":"<p>Monitor network requests:</p> <pre><code>SquadSDK.enableNetworkLogging(true)\n</code></pre>"},{"location":"troubleshooting/#support-resources","title":"Support Resources","text":""},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":"<ol> <li> <p>Documentation</p> </li> <li> <p>Platform-specific guides</p> </li> <li> <p>Support Channels</p> </li> <li> <p>Email: support@squadforsports.com</p> </li> <li>Support portal: support.squadforsports.com</li> <li> <p>GitHub issues</p> </li> <li> <p>Debug Information    When reporting issues, include:</p> </li> <li>SDK version</li> <li>Platform details</li> <li>Error logs</li> <li>Reproduction steps</li> <li>Context information</li> </ol>"},{"location":"troubleshooting/#platform-specific-guides","title":"Platform-Specific Guides","text":"<p>For platform-specific troubleshooting:</p> <ul> <li>iOS Troubleshooting</li> <li>Android Troubleshooting</li> </ul>"},{"location":"user-auth/","title":"User Initialization","text":"<p>After initializing the Squad SDK with your organization credentials, the next step is to authenticate users to access the Squad features within your app. The SDK supports two methods of user authentication: email and access token.</p>"},{"location":"user-auth/#email-authentication","title":"Email Authentication","text":"<p>To authenticate a user using their email address:</p>"},{"location":"user-auth/#ios","title":"iOS","text":"<pre><code>do {\n    try squadSDK.initializeUser(email: \"user@example.com\")\n    print(\"User initialized successfully\")\n} catch {\n    print(\"Failed to initialize user: \\(error)\")\n}\n</code></pre>"},{"location":"user-auth/#android","title":"Android","text":"<pre><code>try {\n    squadSDK.initializeUser(\"user@example.com\")\n    println(\"User initialized successfully\")\n} catch (e: Exception) {\n    println(\"Failed to initialize user: $e\")\n}\n</code></pre>"},{"location":"user-auth/#react-native","title":"React Native","text":"<pre><code>try {\n  await squadSDK.initializeUser(\"user@example.com\");\n  console.log(\"User initialized successfully\");\n} catch (error) {\n  console.error(\"Failed to initialize user:\", error);\n}\n</code></pre>"},{"location":"user-auth/#access-token-authentication","title":"Access Token Authentication","text":"<p>If your app already has an authentication system in place, you can use access tokens to authenticate users with the Squad SDK. To authenticate a user using an access token:</p>"},{"location":"user-auth/#ios_1","title":"iOS","text":"<pre><code>do {\n    try squadSDK.initializeUser(token: \"YOUR_ACCESS_TOKEN\")\n    print(\"User initialized successfully\")\n} catch {\n    print(\"Failed to initialize user: \\(error)\")\n}\n</code></pre>"},{"location":"user-auth/#android_1","title":"Android","text":"<pre><code>try {\n    squadSDK.initializeUser(\"YOUR_ACCESS_TOKEN\")\n    println(\"User initialized successfully\")\n} catch (e: Exception) {\n    println(\"Failed to initialize user: $e\")\n}\n</code></pre>"},{"location":"user-auth/#react-native_1","title":"React Native","text":"<pre><code>try {\n  await squadSDK.initializeUser(\"YOUR_ACCESS_TOKEN\");\n  console.log(\"User initialized successfully\");\n} catch (error) {\n  console.error(\"Failed to initialize user:\", error);\n}\n</code></pre> <p>Make sure to replace <code>\"YOUR_ACCESS_TOKEN\"</code> with the actual access token obtained from your app's authentication system.</p>"},{"location":"user-auth/#user-management","title":"User Management","text":"<p>The Squad SDK handles user sessions automatically, so you don't need to manage session state yourself. Once a user is initialized, they can access the Squad features seamlessly.</p> <p>If you need to logout a user or switch to a different user, simply call the <code>logoutUser</code> method:</p>"},{"location":"user-auth/#ios_2","title":"iOS","text":"<pre><code>squadSDK.logoutUser()\n</code></pre>"},{"location":"user-auth/#android_2","title":"Android","text":"<pre><code>squadSDK.logoutUser()\n</code></pre>"},{"location":"user-auth/#react-native_2","title":"React Native","text":"<pre><code>squadSDK.logoutUser();\n</code></pre> <p>After logging out a user, you can initialize a new user by calling the <code>initializeUser</code> method again with the appropriate email or access token.</p> <p>For more information on user authentication and management, refer to the platform-specific guides:</p> <ul> <li>iOS User Authentication Guide</li> <li>Android User Authentication Guide</li> <li>React Native User Authentication Guide</li> </ul>"},{"location":"webview/","title":"WebView Integration","text":"<p>The Squad SDK uses WebViews to display the Squad social features within your app. WebViews provide a seamless way to embed web content into native mobile applications, allowing you to leverage Squad's web-based UI components and functionality.</p>"},{"location":"webview/#presenting-the-squad-webview","title":"Presenting the Squad WebView","text":"<p>To present the Squad WebView in your app, follow these steps:</p>"},{"location":"webview/#ios","title":"iOS","text":"<pre><code>do {\n    try squadSDK.openSquadWebView()\n    print(\"Squad WebView presented successfully\")\n} catch {\n    print(\"Failed to present Squad WebView: \\(error)\")\n}\n</code></pre>"},{"location":"webview/#android","title":"Android","text":"<pre><code>try {\n    squadSDK.openSquadWebView()\n    println(\"Squad WebView presented successfully\")\n} catch (e: Exception) {\n    println(\"Failed to present Squad WebView: $e\")\n}\n</code></pre>"},{"location":"webview/#react-native","title":"React Native","text":"<pre><code>try {\n  await squadSDK.openSquadWebView();\n  console.log(\"Squad WebView presented successfully\");\n} catch (error) {\n  console.error(\"Failed to present Squad WebView:\", error);\n}\n</code></pre> <p>Before calling the <code>openSquadWebView</code> method, ensure that you have initialized the SDK and authenticated the user.</p>"},{"location":"webview/#webview-events","title":"WebView Events","text":"<p>The Squad SDK emits events to notify your app about important WebView-related actions, such as:</p> <ul> <li>WebView loaded</li> <li>WebView failed to load</li> <li>WebView dismissed</li> </ul> <p>You can listen for these events to perform actions or update your app's UI accordingly. For example, you might want to show a loading indicator while the WebView is loading or handle errors gracefully if the WebView fails to load.</p> <p>To learn more about handling WebView events, refer to the platform-specific guides:</p> <ul> <li>iOS WebView Events Guide</li> <li>Android WebView Events Guide</li> <li>React Native WebView Events Guide</li> </ul> <p>By leveraging WebViews, the Squad SDK makes it easy to integrate powerful social features into your app without the need for complex native implementations. With just a few lines of code, you can provide your users with a rich and engaging social experience powered by Squad.</p>"},{"location":"android/configuration/","title":"Android Configuration Guide","text":""},{"location":"android/configuration/#overview","title":"Overview","text":"<p>This guide covers all configuration options available in the Squad SDK for Android, including initialization, security, networking, and feature-specific settings.</p>"},{"location":"android/configuration/#basic-configuration","title":"Basic Configuration","text":""},{"location":"android/configuration/#sdk-configuration","title":"SDK Configuration","text":"<pre><code>data class SquadConfig(\n    val organizationId: String,\n    val apiKey: String,\n    val environment: Environment,\n    val logLevel: LogLevel\n)\n\n// Using Builder pattern\nSquadSDK.Builder(context)\n    .setOrganizationId(\"YOUR_ORG_ID\")\n    .setApiKey(\"YOUR_API_KEY\")\n    .setEnvironment(Environment.PRODUCTION)\n    .setLogLevel(LogLevel.INFO)\n    .build()\n    .initialize()\n</code></pre>"},{"location":"android/configuration/#environment-configuration","title":"Environment Configuration","text":"<pre><code>enum class Environment {\n    PRODUCTION,\n    STAGING,\n    DEVELOPMENT;\n\n    data class Custom(val baseUrl: String)\n}\n\n// Custom environment setup\nSquadSDK.Builder(context)\n    .setEnvironment(Environment.Custom(\"https://dev-api.yourdomain.com\"))\n    .build()\n</code></pre>"},{"location":"android/configuration/#security-configuration","title":"Security Configuration","text":""},{"location":"android/configuration/#certificate-pinning","title":"Certificate Pinning","text":"<pre><code>val certificateConfig = CertificatePinningConfig.Builder()\n    .addCertificate(\"api.squadforsports.com\", \"sha256/XXXX\")\n    .addBackupCertificate(\"api.squadforsports.com\", \"sha256/YYYY\")\n    .setIncludeDefaultCertificates(true)\n    .build()\n\nsquadSDK.setCertificatePinning(certificateConfig)\n</code></pre>"},{"location":"android/configuration/#user-data-protection","title":"User Data Protection","text":"<pre><code>val securityConfig = SecurityConfig.Builder()\n    .setEncryption(EncryptionConfig.AES256)\n    .setBiometricAuth(BiometricConfig.OPTIONAL)\n    .setSecureStorage(StorageConfig.ENCRYPTED_SHARED_PREFS)\n    .build()\n\nsquadSDK.setSecurityConfig(securityConfig)\n</code></pre>"},{"location":"android/configuration/#network-configuration","title":"Network Configuration","text":""},{"location":"android/configuration/#timeouts-and-retries","title":"Timeouts and Retries","text":"<pre><code>val networkConfig = NetworkConfig.Builder()\n    .setConnectionTimeout(30_000) // 30 seconds\n    .setReadTimeout(30_000)\n    .setWriteTimeout(30_000)\n    .setRetryPolicy(\n        RetryPolicy(\n            maxRetries = 3,\n            backoffMultiplier = 1.5f,\n            initialRetryDelayMs = 1000\n        )\n    )\n    .build()\n\nsquadSDK.setNetworkConfig(networkConfig)\n</code></pre>"},{"location":"android/configuration/#caching-strategy","title":"Caching Strategy","text":"<pre><code>val cacheConfig = CacheConfig.Builder()\n    .setDiskCacheSize(50 * 1024 * 1024L) // 50 MB\n    .setMemoryCacheSize(10 * 1024 * 1024L) // 10 MB\n    .setTimeToLive(3600) // 1 hour\n    .setDiskCacheDirectory(context.cacheDir)\n    .build()\n\nsquadSDK.setCacheConfig(cacheConfig)\n</code></pre>"},{"location":"android/configuration/#webview-configuration","title":"WebView Configuration","text":""},{"location":"android/configuration/#basic-setup","title":"Basic Setup","text":"<pre><code>val webViewConfig = WebViewConfig.Builder()\n    .setMediaPlaybackRequiresUserGesture(false)\n    .setDomStorageEnabled(true)\n    .setJavaScriptEnabled(true)\n    .setGeolocationEnabled(false)\n    .build()\n\nsquadSDK.setWebViewConfig(webViewConfig)\n</code></pre>"},{"location":"android/configuration/#content-configuration","title":"Content Configuration","text":"<pre><code>val contentConfig = ContentConfig.Builder()\n    .setAllowedContentTypes(setOf(ContentType.ALL))\n    .setUserScalable(false)\n    .setLoadWithOverviewMode(true)\n    .setUseWideViewPort(true)\n    .build()\n\nwebViewConfig.setContentConfig(contentConfig)\n</code></pre>"},{"location":"android/configuration/#voice-call-configuration","title":"Voice Call Configuration","text":""},{"location":"android/configuration/#audio-settings","title":"Audio Settings","text":"<pre><code>val audioConfig = AudioConfig.Builder()\n    .setAudioMode(AudioMode.VOICE_CHAT)\n    .setEchoCancellation(true)\n    .setNoiseSuppression(true)\n    .setAutomaticGainControl(true)\n    .build()\n\nsquadSDK.setAudioConfig(audioConfig)\n</code></pre>"},{"location":"android/configuration/#call-quality","title":"Call Quality","text":"<pre><code>val qualityConfig = CallQualityConfig.Builder()\n    .setBitrateMode(BitrateMode.ADAPTIVE)\n    .setMinBitrate(8000)\n    .setMaxBitrate(32000)\n    .setOpusMode(OpusMode.VOIP)\n    .build()\n\nsquadSDK.setCallQualityConfig(qualityConfig)\n</code></pre>"},{"location":"android/configuration/#analytics-configuration","title":"Analytics Configuration","text":"<pre><code>val analyticsConfig = AnalyticsConfig.Builder()\n    .setEnabled(true)\n    .setTrackingEvents(\n        setOf(\n            TrackingEvent.CALLS,\n            TrackingEvent.ERRORS,\n            TrackingEvent.PERFORMANCE\n        )\n    )\n    .addCustomDimension(\"app_version\", BuildConfig.VERSION_NAME)\n    .addCustomDimension(\"environment\", \"production\")\n    .build()\n\nsquadSDK.setAnalyticsConfig(analyticsConfig)\n</code></pre>"},{"location":"android/configuration/#error-handling-configuration","title":"Error Handling Configuration","text":"<pre><code>val errorConfig = ErrorConfig.Builder()\n    .setRetryableErrors(setOf(ErrorType.NETWORK, ErrorType.TIMEOUT))\n    .setMaxRetries(3)\n    .setErrorCallback { error -&gt;\n        // Handle errors\n        Log.e(\"SquadSDK\", \"Error occurred: $error\")\n    }\n    .build()\n\nsquadSDK.setErrorConfig(errorConfig)\n</code></pre>"},{"location":"android/configuration/#resource-management","title":"Resource Management","text":""},{"location":"android/configuration/#memory-management","title":"Memory Management","text":"<pre><code>val memoryConfig = MemoryConfig.Builder()\n    .setLowMemoryThreshold(50 * 1024 * 1024L) // 50 MB\n    .setCriticalMemoryThreshold(25 * 1024 * 1024L) // 25 MB\n    .setCleanupCallback {\n        // Perform cleanup\n    }\n    .build()\n\nsquadSDK.setMemoryConfig(memoryConfig)\n</code></pre>"},{"location":"android/configuration/#background-tasks","title":"Background Tasks","text":"<pre><code>val backgroundConfig = BackgroundConfig.Builder()\n    .setAllowedTasks(setOf(BackgroundTask.VOICE_CALLS, BackgroundTask.MESSAGE_DELIVERY))\n    .setTimeout(30_000)\n    .setCompletionCallback { result -&gt;\n        // Handle background task completion\n    }\n    .build()\n\nsquadSDK.setBackgroundConfig(backgroundConfig)\n</code></pre>"},{"location":"android/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"android/configuration/#custom-event-handling","title":"Custom Event Handling","text":"<pre><code>val eventConfig = EventConfig.Builder()\n    .setEventHandler { event -&gt;\n        when (event) {\n            is SquadEvent.CallStarted -&gt; {\n                // Handle call start\n            }\n            is SquadEvent.CallEnded -&gt; {\n                // Handle call end\n            }\n            is SquadEvent.Error -&gt; {\n                // Handle error\n            }\n        }\n    }\n    .build()\n\nsquadSDK.setEventConfig(eventConfig)\n</code></pre>"},{"location":"android/configuration/#debug-configuration","title":"Debug Configuration","text":"<pre><code>if (BuildConfig.DEBUG) {\n    val debugConfig = DebugConfig.Builder()\n        .setLogLevel(LogLevel.DEBUG)\n        .setNetworkLogging(true)\n        .setPerformanceMetricsEnabled(true)\n        .setScreenshotEnabled(true)\n        .build()\n\n    squadSDK.setDebugConfig(debugConfig)\n}\n</code></pre>"},{"location":"android/configuration/#proguard-configuration","title":"ProGuard Configuration","text":"<p>Add these rules to your <code>proguard-rules.pro</code>:</p> <pre><code># Squad SDK\n-keep class com.withsquad.sdk.** { *; }\n-keepclassmembers class com.withsquad.sdk.** { *; }\n\n# WebView JavaScript Interface\n-keepclassmembers class * {\n    @android.webkit.JavascriptInterface &lt;methods&gt;;\n}\n</code></pre>"},{"location":"android/configuration/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Security</p> </li> <li> <p>Enable certificate pinning in production</p> </li> <li>Use encrypted shared preferences for sensitive data</li> <li>Configure appropriate timeouts</li> <li> <p>Implement proper ProGuard rules</p> </li> <li> <p>Performance</p> </li> <li> <p>Configure appropriate cache sizes</p> </li> <li>Implement memory management</li> <li>Handle lifecycle events properly</li> <li> <p>Use appropriate background task handling</p> </li> <li> <p>Error Handling</p> </li> <li> <p>Configure comprehensive error handling</p> </li> <li>Implement appropriate retry strategies</li> <li>Use proper logging levels</li> <li> <p>Handle configuration changes</p> </li> <li> <p>Testing</p> </li> <li>Use staging environment for testing</li> <li>Enable debug logging in development</li> <li>Test with various network conditions</li> <li>Verify ProGuard configurations</li> </ol>"},{"location":"android/configuration/#related-documentation","title":"Related Documentation","text":"<ul> <li>Installation Guide</li> <li>WebView Management</li> <li>Troubleshooting</li> </ul>"},{"location":"android/getting-started/","title":"Getting Started with Squad SDK for Android","text":"<p>This guide will help you integrate the Squad SDK into your Android app, enabling social features and voice calling capabilities.</p>"},{"location":"android/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>A Squad developer account and credentials</li> <li>Android Studio Arctic Fox (2020.3.1) or newer</li> <li>Minimum SDK level 21 (Android 5.0)</li> <li>Kotlin 1.5.0 or later</li> <li>Gradle 7.0 or higher</li> </ul>"},{"location":"android/getting-started/#installation","title":"Installation","text":""},{"location":"android/getting-started/#gradle-setup","title":"Gradle Setup","text":"<ol> <li>Add Maven Central repository in <code>settings.gradle</code>:</li> </ol> <pre><code>dependencyResolutionManagement {\n    repositories {\n        mavenCentral()\n    }\n}\n</code></pre> <ol> <li>Add SDK dependency in app's <code>build.gradle</code>:</li> </ol> <pre><code>dependencies {\n    implementation 'com.withyoursquad.sdk:squadsdk:1.0.0'\n}\n</code></pre> <p>For detailed installation options and troubleshooting, see our Installation Guide.</p>"},{"location":"android/getting-started/#quick-start-guide","title":"Quick Start Guide","text":""},{"location":"android/getting-started/#1-sdk-initialization","title":"1. SDK Initialization","text":"<p>Initialize the SDK in your Application class:</p> <pre><code>class MyApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n\n        val config = SquadConfig.Builder()\n            .setOrganizationId(\"YOUR_ORG_ID\")\n            .setApiKey(\"YOUR_API_KEY\")\n            .setEnvironment(Environment.PRODUCTION)\n            .build()\n\n        try {\n            SquadSDK.initialize(this, config)\n            Log.d(\"SquadSDK\", \"Initialized successfully\")\n        } catch (e: SquadSDKException) {\n            Log.e(\"SquadSDK\", \"Initialization failed\", e)\n        }\n    }\n}\n</code></pre> <p>Register in AndroidManifest.xml:</p> <pre><code>&lt;application\n    android:name=\".MyApplication\"\n    ...&gt;\n</code></pre> <p>For advanced configuration options, see our Configuration Guide.</p>"},{"location":"android/getting-started/#2-user-authentication","title":"2. User Authentication","text":"<p>Authenticate users using email or token:</p> <pre><code>squadSDK.authenticateUser(\n    identifier = \"user@example.com\",\n    authType = AuthType.EMAIL\n) { result -&gt;\n    when (result) {\n        is AuthResult.Success -&gt; {\n            Log.d(\"SquadSDK\", \"User authenticated: ${result.user.id}\")\n        }\n        is AuthResult.Error -&gt; {\n            Log.e(\"SquadSDK\", \"Authentication failed\", result.error)\n        }\n    }\n}\n</code></pre> <p>Learn more in our User Authentication Guide.</p>"},{"location":"android/getting-started/#3-webview-integration","title":"3. WebView Integration","text":"<p>Present the Squad experience:</p> <pre><code>class MainActivity : AppCompatActivity() {\n    private lateinit var squadSDK: SquadSDK\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        val webViewConfig = WebViewConfig.Builder()\n            .setFeatures(setOf(\n                Feature.VOICE_CALLS,\n                Feature.FREESTYLES,\n                Feature.POLLS\n            ))\n            .build()\n\n        try {\n            val webView = squadSDK.presentWebView(this, webViewConfig)\n            setContentView(webView)\n        } catch (e: SquadSDKException) {\n            Log.e(\"SquadSDK\", \"WebView presentation failed\", e)\n        }\n    }\n}\n</code></pre> <p>For comprehensive WebView management, see our WebView Management Guide.</p>"},{"location":"android/getting-started/#required-permissions","title":"Required Permissions","text":"<p>Add to AndroidManifest.xml:</p> <pre><code>&lt;!-- Required permissions --&gt;\n&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n&lt;uses-permission android:name=\"android.permission.RECORD_AUDIO\" /&gt;\n\n&lt;!-- Optional permissions --&gt;\n&lt;uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\" /&gt;\n&lt;uses-permission android:name=\"android.permission.BLUETOOTH\" /&gt;\n</code></pre>"},{"location":"android/getting-started/#integration-guides","title":"Integration Guides","text":"<ul> <li>Installation &amp; Setup - Detailed installation steps</li> <li>Configuration Guide - Advanced SDK configuration</li> <li>WebView Management - WebView integration and management</li> <li>User Authentication - Authentication implementation</li> <li>WebView Events - Event handling guide</li> <li>ProGuard Configuration - ProGuard setup</li> </ul>"},{"location":"android/getting-started/#troubleshooting","title":"Troubleshooting","text":"<p>For common issues and solutions, see our Troubleshooting Guide.</p>"},{"location":"android/getting-started/#additional-resources","title":"Additional Resources","text":"<ul> <li>Sample Projects</li> </ul>"},{"location":"android/getting-started/#support","title":"Support","text":"<p>Need help? Our support team is ready to assist:</p> <ul> <li>Support Center: https://support.squadforsports.com</li> <li>Email: support@squadforsports.com</li> <li>Documentation: https://docs.squadforsports.com</li> </ul>"},{"location":"android/installation/","title":"Android Installation &amp; Setup","text":""},{"location":"android/installation/#requirements","title":"Requirements","text":"<ul> <li>Android API level 21 (Android 5.0) or higher</li> <li>Android Studio Arctic Fox (2020.3.1) or newer</li> <li>Gradle 7.0 or higher</li> <li>Java 8 or higher</li> </ul>"},{"location":"android/installation/#installation","title":"Installation","text":""},{"location":"android/installation/#gradle-setup","title":"Gradle Setup","text":"<ol> <li>Add the Maven Central repository to your project's <code>settings.gradle</code>:</li> </ol> <pre><code>dependencyResolutionManagement {\n    repositories {\n        mavenCentral()\n    }\n}\n</code></pre> <ol> <li>Add the dependency to your app's <code>build.gradle</code>:</li> </ol> <pre><code>dependencies {\n    implementation 'com.withsquad.sdk:squadline:1.0.0'\n}\n</code></pre>"},{"location":"android/installation/#manual-aar-integration-alternative","title":"Manual AAR Integration (Alternative)","text":"<p>If you prefer manual integration:</p> <ol> <li>Download the AAR from our releases page</li> <li>Add the AAR to your project's <code>libs</code> folder</li> <li>Add the dependency in your app's <code>build.gradle</code>:</li> </ol> <pre><code>dependencies {\n    implementation files('libs/squadline-sdk-1.0.0.aar')\n}\n</code></pre>"},{"location":"android/installation/#project-setup","title":"Project Setup","text":""},{"location":"android/installation/#1-required-permissions","title":"1. Required Permissions","text":"<p>Add the following to your <code>AndroidManifest.xml</code>:</p> <pre><code>&lt;!-- Required permissions --&gt;\n&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n&lt;uses-permission android:name=\"android.permission.RECORD_AUDIO\" /&gt;\n\n&lt;!-- Optional permissions --&gt;\n&lt;uses-permission android:name=\"android.permission.CAMERA\" /&gt;\n&lt;uses-permission android:name=\"android.permission.BLUETOOTH\" /&gt;\n&lt;uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\" /&gt;\n&lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"\n    android:maxSdkVersion=\"32\" /&gt;\n&lt;uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\" /&gt;\n</code></pre>"},{"location":"android/installation/#2-network-security","title":"2. Network Security","text":"<p>Add network security configuration to <code>res/xml/network_security_config.xml</code>:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;network-security-config&gt;\n    &lt;domain-config cleartextTrafficPermitted=\"false\"&gt;\n        &lt;domain includeSubdomains=\"true\"&gt;squadforsports.com&lt;/domain&gt;\n        &lt;pin-set&gt;\n            &lt;!-- Squad API certificate pins --&gt;\n            &lt;pin digest=\"SHA-256\"&gt;base64-encoded-pin-here&lt;/pin&gt;\n            &lt;!-- Backup pin --&gt;\n            &lt;pin digest=\"SHA-256\"&gt;backup-pin-here&lt;/pin&gt;\n        &lt;/pin-set&gt;\n    &lt;/domain-config&gt;\n&lt;/network-security-config&gt;\n</code></pre> <p>Reference it in your <code>AndroidManifest.xml</code>:</p> <pre><code>&lt;application\n    android:networkSecurityConfig=\"@xml/network_security_config\"\n    ...&gt;\n</code></pre>"},{"location":"android/installation/#3-proguard-configuration","title":"3. ProGuard Configuration","text":"<p>If you use ProGuard, add these rules to your <code>proguard-rules.pro</code>:</p> <pre><code># Squad SDK\n-keep class com.withsquad.sdk.** { *; }\n-keepclassmembers class com.withsquad.sdk.** { *; }\n\n# WebView\n-keepclassmembers class * extends android.webkit.WebChromeClient {\n    public void openFileChooser(...);\n    public boolean onShowFileChooser(...);\n}\n\n# Keep Squad JavaScript interface\n-keepclassmembers class * {\n    @android.webkit.JavascriptInterface &lt;methods&gt;;\n}\n</code></pre>"},{"location":"android/installation/#post-installation-steps","title":"Post-Installation Steps","text":""},{"location":"android/installation/#1-initialize-the-sdk","title":"1. Initialize the SDK","text":"<p>In your Application class:</p> <pre><code>class MyApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n\n        try {\n            SquadSDK.initialize(\n                context = this,\n                config = SquadConfig.Builder()\n                    .setOrganizationId(\"YOUR_ORG_ID\")\n                    .setApiKey(\"YOUR_API_KEY\")\n                    .build()\n            )\n        } catch (e: SquadSDKException) {\n            Log.e(\"SquadSDK\", \"Initialization failed\", e)\n        }\n    }\n}\n</code></pre> <p>Don't forget to register your Application class in <code>AndroidManifest.xml</code>:</p> <pre><code>&lt;application\n    android:name=\".MyApplication\"\n    ...&gt;\n</code></pre>"},{"location":"android/installation/#2-verify-installation","title":"2. Verify Installation","text":"<p>Add a test implementation:</p> <pre><code>class MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Verify SDK version\n        Log.d(\"SquadSDK\", \"Version: ${SquadSDK.version}\")\n\n        // Check initialization status\n        if (SquadSDK.isInitialized) {\n            Log.d(\"SquadSDK\", \"SDK initialized successfully\")\n        }\n    }\n}\n</code></pre>"},{"location":"android/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"android/installation/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Gradle Sync Failed</p> </li> <li> <p>Check Gradle version compatibility</p> </li> <li>Update Gradle plugin version</li> <li> <p>Sync project with Gradle files</p> </li> <li> <p>Manifest Merge Failed</p> </li> <li> <p>Check for permission conflicts</p> </li> <li>Resolve duplicate declarations</li> <li> <p>Update manifest merger rules</p> </li> <li> <p>ProGuard Issues</p> </li> <li>Verify ProGuard rules</li> <li>Check mapping file</li> <li>Enable ProGuard debugging</li> </ol>"},{"location":"android/installation/#support","title":"Support","text":"<p>For installation issues:</p> <ul> <li>Check our troubleshooting guide</li> <li>Visit our support center</li> <li>Contact support at support@squadforsports.com</li> </ul>"},{"location":"android/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Configure the SDK using the Configuration Guide</li> <li>Set up user authentication with User Auth Guide</li> <li>Integrate WebView using WebView Management</li> </ul>"},{"location":"android/proguard/","title":"ProGuard Configuration Guide","text":""},{"location":"android/proguard/#overview","title":"Overview","text":"<p>This guide covers the ProGuard configuration required for the Squad SDK, ensuring proper code optimization while maintaining functionality.</p>"},{"location":"android/proguard/#basic-configuration","title":"Basic Configuration","text":"<p>Add these rules to your <code>proguard-rules.pro</code>:</p> <pre><code># Squad SDK Core\n-keep class com.withsquad.sdk.** { *; }\n-keepclassmembers class com.withsquad.sdk.** { *; }\n-keepnames class com.withsquad.sdk.** { *; }\n\n# Keep SDK interfaces\n-keep interface com.withsquad.sdk.** { *; }\n\n# Keep SDK enums\n-keepclassmembers enum com.withsquad.sdk.** { *; }\n</code></pre>"},{"location":"android/proguard/#webview-configuration","title":"WebView Configuration","text":"<pre><code># JavaScript Interface\n-keepclassmembers class * {\n    @android.webkit.JavascriptInterface &lt;methods&gt;;\n}\n\n# WebView Bridge\n-keepclassmembers class com.withsquad.sdk.bridge.** {\n    public *;\n}\n\n# WebView Chrome Client\n-keepclassmembers class * extends android.webkit.WebChromeClient {\n    public void openFileChooser(...);\n    public boolean onShowFileChooser(...);\n}\n</code></pre>"},{"location":"android/proguard/#voice-calling-components","title":"Voice Calling Components","text":"<pre><code># Twilio Voice SDK\n-keep class com.twilio.** { *; }\n-keep class tvo.webrtc.** { *; }\n-keep class org.webrtc.** { *; }\n\n# Audio Components\n-keep class com.withsquad.sdk.audio.** { *; }\n-keep class * implements com.withsquad.sdk.audio.AudioManager { *; }\n</code></pre>"},{"location":"android/proguard/#data-models","title":"Data Models","text":"<pre><code># Keep all Squad SDK models\n-keep class com.withsquad.sdk.models.** { *; }\n-keepclassmembers class com.withsquad.sdk.models.** {\n    &lt;init&gt;(...);\n    &lt;fields&gt;;\n}\n\n# Keep Serializable/Parcelable implementation\n-keepclassmembers class * implements android.os.Parcelable {\n    public static final android.os.Parcelable$Creator *;\n}\n-keepclassmembers class * implements java.io.Serializable {\n    private static final java.io.ObjectStreamField[] serialPersistentFields;\n    private void writeObject(java.io.ObjectOutputStream);\n    private void readObject(java.io.ObjectInputStream);\n    java.lang.Object writeReplace();\n    java.lang.Object readResolve();\n}\n</code></pre>"},{"location":"android/proguard/#network-components","title":"Network Components","text":"<pre><code># OkHttp\n-dontwarn okhttp3.**\n-dontwarn okio.**\n-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase\n\n# Retrofit\n-keepattributes Signature\n-keepattributes Exceptions\n-keepclasseswithmembers class * {\n    @retrofit2.http.* &lt;methods&gt;;\n}\n</code></pre>"},{"location":"android/proguard/#event-handling","title":"Event Handling","text":"<pre><code># Keep event classes\n-keep class com.withsquad.sdk.events.** { *; }\n-keepclassmembers class * {\n    @com.withsquad.sdk.events.Subscribe &lt;methods&gt;;\n}\n</code></pre>"},{"location":"android/proguard/#security-components","title":"Security Components","text":"<pre><code># Cryptography\n-keepclassmembers class * extends java.security.Provider {\n    &lt;init&gt;(...);\n}\n\n# Certificate Pinning\n-keepclassmembers class com.withsquad.sdk.security.** {\n    public static final byte[];\n}\n</code></pre>"},{"location":"android/proguard/#debug-configuration","title":"Debug Configuration","text":"<p>Add these rules for debug builds:</p> <pre><code># Keep source file names and line numbers for stack traces\n-keepattributes SourceFile,LineNumberTable\n\n# If you want to get stack traces with obfuscated class names\n-renamesourcefileattribute SourceFile\n</code></pre>"},{"location":"android/proguard/#r8-full-mode-configuration","title":"R8 Full Mode Configuration","text":"<p>If using R8 in full mode:</p> <pre><code># Enable R8 full mode\n-allowaccessmodification\n-repackageclasses 'com.withsquad.sdk'\n\n# Keep important SDK components\n-keep class com.withsquad.sdk.SquadSDK {\n    public protected *;\n}\n</code></pre>"},{"location":"android/proguard/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"android/proguard/#1-missing-classes","title":"1. Missing Classes","text":"<p>If you encounter <code>ClassNotFoundException</code>:</p> <pre><code># Keep factory classes\n-keepnames class * implements com.withsquad.sdk.internal.Factory\n\n# Keep classes accessed via reflection\n-keepclassmembers class * {\n    @com.withsquad.sdk.annotations.Keep *;\n}\n</code></pre>"},{"location":"android/proguard/#2-javascript-interface-issues","title":"2. JavaScript Interface Issues","text":"<p>If WebView JavaScript interface stops working:</p> <pre><code># Keep all JavaScript interface methods\n-keepclassmembers class * {\n    @android.webkit.JavascriptInterface &lt;methods&gt;;\n    public *; # Keep all public methods\n}\n</code></pre>"},{"location":"android/proguard/#3-serialization-issues","title":"3. Serialization Issues","text":"<p>If you encounter serialization problems:</p> <pre><code># Keep all fields for serialization\n-keepclassmembers class * {\n    @com.google.gson.annotations.SerializedName &lt;fields&gt;;\n}\n</code></pre>"},{"location":"android/proguard/#verification","title":"Verification","text":"<p>To verify your ProGuard configuration:</p> <ol> <li>Build your release variant</li> <li>Check <code>build/outputs/mapping/release/mapping.txt</code></li> <li>Test all SDK features in release build</li> <li>Verify WebView functionality</li> <li>Test voice calling features</li> </ol>"},{"location":"android/proguard/#size-impact","title":"Size Impact","text":"<p>The Squad SDK ProGuard rules typically result in:</p> <ul> <li>Minimal impact on app size (~100-200KB increase)</li> <li>Maintained functionality with optimization</li> <li>Secured code through obfuscation</li> </ul>"},{"location":"android/proguard/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Testing</p> </li> <li> <p>Always test release builds</p> </li> <li>Verify all SDK features</li> <li> <p>Check crash reporting</p> </li> <li> <p>Maintenance</p> </li> <li> <p>Update rules with SDK updates</p> </li> <li>Monitor mapping files</li> <li> <p>Keep backup of mapping files</p> </li> <li> <p>Optimization</p> </li> <li>Use R8 when possible</li> <li>Enable optimization</li> <li>Monitor size impact</li> </ol>"},{"location":"android/proguard/#related-documentation","title":"Related Documentation","text":"<ul> <li>Installation Guide</li> <li>Configuration Guide</li> <li>Troubleshooting</li> </ul>"},{"location":"android/sdk-init/","title":"Squad SDK Initialization for Android","text":"<p>The Squad SDK initialization process consists of three key steps:</p> <ol> <li>SDK Initialization</li> <li>User Initialization</li> <li>WebView Initialization</li> </ol>"},{"location":"android/sdk-init/#sdk-initialization","title":"SDK Initialization","text":""},{"location":"android/sdk-init/#obtaining-credentials","title":"Obtaining Credentials","text":"<ol> <li>Login to your developer account at https://developer.squadforsports.com</li> <li>Navigate to Organization Settings</li> <li>Copy your Organization ID and API Key</li> </ol>"},{"location":"android/sdk-init/#initialization-code","title":"Initialization Code","text":"<pre><code>import com.withsquad.sdk.SquadSDK\nimport com.withsquad.sdk.config.SquadConfig\n\nclass MyApplication : Application() {\n    lateinit var squadSDK: SquadSDK\n\n    override fun onCreate() {\n        super.onCreate()\n\n        // SDK Initialization\n        squadSDK = SquadSDK.Builder(this)\n            .setOrganizationId(\"YOUR_ORGANIZATION_ID\")\n            .setApiKey(\"YOUR_API_KEY\")\n            .setEnvironment(SquadEnvironment.PRODUCTION) // or STAGING\n            .build()\n\n        try {\n            squadSDK.initialize()\n        } catch (e: SquadSDKException) {\n            Log.e(\"SquadSDK\", \"Initialization Error: ${e.message}\")\n        }\n    }\n}\n</code></pre>"},{"location":"android/sdk-init/#user-initialization","title":"User Initialization","text":""},{"location":"android/sdk-init/#authentication-methods","title":"Authentication Methods","text":"<p>The Squad SDK supports two primary user initialization methods:</p> <ol> <li>Email Authentication</li> </ol> <pre><code>fun initializeUser(email: String) {\n    squadSDK.initializeUser(\n        identifier = email,\n        authType = AuthType.EMAIL\n    ) { result -&gt;\n        when (result) {\n            is UserInitResult.Success -&gt; {\n                Log.d(\"SquadSDK\", \"User initialized successfully\")\n            }\n            is UserInitResult.Error -&gt; {\n                Log.e(\"SquadSDK\", \"User initialization failed: ${result.error}\")\n            }\n        }\n    }\n}\n</code></pre> <ol> <li>Token Authentication</li> </ol> <pre><code>fun initializeUser(token: String) {\n    squadSDK.initializeUser(\n        identifier = token,\n        authType = AuthType.TOKEN\n    ) { result -&gt;\n        when (result) {\n            is UserInitResult.Success -&gt; {\n                Log.d(\"SquadSDK\", \"User initialized successfully\")\n            }\n            is UserInitResult.Error -&gt; {\n                Log.e(\"SquadSDK\", \"User initialization failed: ${result.error}\")\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"android/sdk-init/#webview-initialization","title":"WebView Initialization","text":""},{"location":"android/sdk-init/#presenting-the-squad-experience","title":"Presenting the Squad Experience","text":"<pre><code>class MainActivity : AppCompatActivity() {\n    private lateinit var squadSDK: SquadSDK\n\n    fun openSquadExperience() {\n        val config = WebViewConfiguration.Builder()\n            .setFeatures(\n                setOf(\n                    SquadFeature.FREESTYLES,\n                    SquadFeature.POLLS,\n                    SquadFeature.SQUAD_MANAGEMENT,\n                    SquadFeature.VOICE_CALLING,\n                    SquadFeature.VOICE_MESSAGES\n                )\n            )\n            .build()\n\n        try {\n            squadSDK.presentWebView(\n                activity = this,\n                configuration = config\n            )\n        } catch (e: SquadSDKException) {\n            Log.e(\"SquadSDK\", \"WebView presentation failed: ${e.message}\")\n        }\n    }\n}\n</code></pre>"},{"location":"android/sdk-init/#complete-initialization-example","title":"Complete Initialization Example","text":"<pre><code>class MainActivity : AppCompatActivity() {\n    private lateinit var squadSDK: SquadSDK\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // 1. Get SDK instance\n        squadSDK = (application as MyApplication).squadSDK\n\n        // 2. Initialize user\n        squadSDK.initializeUser(\n            identifier = \"user@example.com\",\n            authType = AuthType.EMAIL\n        ) { result -&gt;\n            when (result) {\n                is UserInitResult.Success -&gt; {\n                    // 3. Present WebView\n                    openSquadExperience()\n                }\n                is UserInitResult.Error -&gt; {\n                    // Handle error\n                    showError(result.error)\n                }\n            }\n        }\n    }\n\n    private fun showError(error: SquadError) {\n        AlertDialog.Builder(this)\n            .setTitle(\"Error\")\n            .setMessage(error.message)\n            .setPositiveButton(\"OK\", null)\n            .show()\n    }\n}\n</code></pre>"},{"location":"android/sdk-init/#error-handling","title":"Error Handling","text":"<pre><code>sealed class SquadSDKException : Exception() {\n    class InitializationError(message: String) : SquadSDKException()\n    class AuthenticationError(message: String) : SquadSDKException()\n    class WebViewError(message: String) : SquadSDKException()\n}\n</code></pre>"},{"location":"android/sdk-init/#best-practices","title":"Best Practices","text":"<ol> <li>Initialize the SDK in your Application class</li> <li>Handle configuration changes properly</li> <li>Implement proper lifecycle management</li> <li>Secure credential storage</li> <li>Handle permissions appropriately</li> <li>Maintain WebView state</li> <li>Keep the SDK updated</li> </ol>"},{"location":"android/sdk-init/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li> <p>Initialization Failures</p> </li> <li> <p>Verify network connectivity</p> </li> <li>Check API credentials</li> <li> <p>Ensure proper manifest setup</p> </li> <li> <p>WebView Issues</p> </li> <li> <p>Check WebView version</p> </li> <li>Verify permissions</li> <li> <p>Review lifecycle management</p> </li> <li> <p>Authentication Problems</p> </li> <li>Validate credentials</li> <li>Check token expiration</li> <li>Review error logs</li> </ol>"},{"location":"android/sdk-init/#support","title":"Support","text":"<ul> <li>Documentation: Squad Developer Docs</li> <li>Support Email: support@squadforsports.com</li> </ul> <p>Note: Always refer to the latest documentation for the most up-to-date SDK initialization instructions.</p>"},{"location":"android/troubleshooting/","title":"Android Troubleshooting Guide","text":"<p>This guide addresses Android-specific issues and solutions when integrating the Squad SDK.</p>"},{"location":"android/troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"android/troubleshooting/#gradle-integration","title":"Gradle Integration","text":""},{"location":"android/troubleshooting/#issue-dependency-resolution","title":"Issue: Dependency Resolution","text":"<pre><code>Error: Failed to resolve: com.withsquad.sdk:squadline:1.0.0\n</code></pre> <p>Solutions:</p> <ol> <li>Check repositories in settings.gradle:</li> </ol> <pre><code>dependencyResolutionManagement {\n    repositories {\n        mavenCentral()\n    }\n}\n</code></pre> <ol> <li>Force dependency refresh:</li> </ol> <pre><code>./gradlew clean build --refresh-dependencies\n</code></pre>"},{"location":"android/troubleshooting/#version-conflicts","title":"Version Conflicts","text":""},{"location":"android/troubleshooting/#issue-dependency-version-conflicts","title":"Issue: Dependency Version Conflicts","text":"<pre><code>Error: Duplicate class found\n</code></pre> <p>Solutions:</p> <ol> <li>Add resolution strategy:</li> </ol> <pre><code>configurations.all {\n    resolutionStrategy {\n        force 'com.withsquad.sdk:squadline:1.0.0'\n    }\n}\n</code></pre> <ol> <li>Check dependency tree:</li> </ol> <pre><code>./gradlew app:dependencies\n</code></pre>"},{"location":"android/troubleshooting/#build-issues","title":"Build Issues","text":""},{"location":"android/troubleshooting/#proguardr8","title":"ProGuard/R8","text":""},{"location":"android/troubleshooting/#issue-proguard-optimization-failures","title":"Issue: ProGuard Optimization Failures","text":"<pre><code>Error: Class not found after ProGuard optimization\n</code></pre> <p>Solutions:</p> <ol> <li>Add ProGuard rules:</li> </ol> <pre><code>-keep class com.withsquad.sdk.** { *; }\n-keepclassmembers class com.withsquad.sdk.** { *; }\n</code></pre> <ol> <li>Check mapping file:</li> </ol> <pre><code>build/outputs/mapping/release/mapping.txt\n</code></pre>"},{"location":"android/troubleshooting/#architecture-issues","title":"Architecture Issues","text":""},{"location":"android/troubleshooting/#issue-abi-compatibility","title":"Issue: ABI Compatibility","text":"<pre><code>Error: Unable to load native library\n</code></pre> <p>Solutions:</p> <ol> <li>Configure ABI filters:</li> </ol> <pre><code>android {\n    defaultConfig {\n        ndk {\n            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'\n        }\n    }\n}\n</code></pre>"},{"location":"android/troubleshooting/#webview-issues","title":"WebView Issues","text":""},{"location":"android/troubleshooting/#webview-loading","title":"WebView Loading","text":""},{"location":"android/troubleshooting/#issue-content-loading-failures","title":"Issue: Content Loading Failures","text":"<pre><code>Error: WebView failed to load content\n</code></pre> <p>Solutions:</p> <ol> <li>Configure WebView properly:</li> </ol> <pre><code>webView.settings.apply {\n    javaScriptEnabled = true\n    domStorageEnabled = true\n    mediaPlaybackRequiresUserGesture = false\n}\n\nwebView.webViewClient = object : WebViewClient() {\n    override fun onReceivedError(\n        view: WebView?,\n        request: WebResourceRequest?,\n        error: WebResourceError?\n    ) {\n        // Handle error\n    }\n}\n</code></pre> <ol> <li>Handle SSL errors:</li> </ol> <pre><code>webView.webViewClient = object : WebViewClient() {\n    override fun onReceivedSslError(\n        view: WebView?,\n        handler: SslErrorHandler?,\n        error: SslError?\n    ) {\n        if (BuildConfig.DEBUG) {\n            handler?.proceed()\n        } else {\n            handler?.cancel()\n        }\n    }\n}\n</code></pre>"},{"location":"android/troubleshooting/#javascript-bridge","title":"JavaScript Bridge","text":""},{"location":"android/troubleshooting/#issue-bridge-communication-failures","title":"Issue: Bridge Communication Failures","text":"<pre><code>Error: JavaScript interface not working\n</code></pre> <p>Solutions:</p> <ol> <li>Verify bridge setup:</li> </ol> <pre><code>class SquadJSInterface(private val context: Context) {\n    @JavascriptInterface\n    fun postMessage(message: String) {\n        // Handle message\n    }\n}\n\nwebView.addJavascriptInterface(SquadJSInterface(context), \"SquadAndroid\")\n</code></pre> <ol> <li>Debug bridge messages:</li> </ol> <pre><code>webView.evaluateJavascript(\n    \"(function() { return window.SquadBridge != null; })();\"\n) { result -&gt;\n    Log.d(\"SquadSDK\", \"Bridge available: $result\")\n}\n</code></pre>"},{"location":"android/troubleshooting/#audio-issues","title":"Audio Issues","text":""},{"location":"android/troubleshooting/#audiomanager","title":"AudioManager","text":""},{"location":"android/troubleshooting/#issue-audio-configuration","title":"Issue: Audio Configuration","text":"<pre><code>Error: Failed to initialize audio system\n</code></pre> <p>Solutions:</p> <ol> <li>Configure audio settings:</li> </ol> <pre><code>val audioManager = context.getSystemService(Context.AUDIO_SERVICE) as AudioManager\naudioManager.mode = AudioManager.MODE_IN_COMMUNICATION\naudioManager.isSpeakerphoneOn = false\n</code></pre> <ol> <li>Handle audio focus:</li> </ol> <pre><code>private val audioFocusRequest = AudioFocusRequest.Builder(\n    AudioManager.AUDIOFOCUS_GAIN\n).run {\n    setAudioAttributes(AudioAttributes.Builder().run {\n        setUsage(AudioAttributes.USAGE_VOICE_COMMUNICATION)\n        setContentType(AudioAttributes.CONTENT_TYPE_SPEECH)\n        build()\n    })\n    setAcceptsDelayedFocusGain(true)\n    setOnAudioFocusChangeListener { focusChange -&gt;\n        // Handle focus change\n    }\n    build()\n}\n</code></pre>"},{"location":"android/troubleshooting/#permissions","title":"Permissions","text":""},{"location":"android/troubleshooting/#issue-microphone-access","title":"Issue: Microphone Access","text":"<pre><code>Error: Missing RECORD_AUDIO permission\n</code></pre> <p>Solutions:</p> <ol> <li>Check permissions:</li> </ol> <pre><code>private fun checkAudioPermission() {\n    if (ContextCompat.checkSelfPermission(\n        context,\n        Manifest.permission.RECORD_AUDIO\n    ) != PackageManager.PERMISSION_GRANTED) {\n        requestAudioPermission()\n    }\n}\n\nprivate fun requestAudioPermission() {\n    ActivityCompat.requestPermissions(\n        activity,\n        arrayOf(Manifest.permission.RECORD_AUDIO),\n        PERMISSION_REQUEST_CODE\n    )\n}\n</code></pre>"},{"location":"android/troubleshooting/#memory-management","title":"Memory Management","text":""},{"location":"android/troubleshooting/#memory-leaks","title":"Memory Leaks","text":""},{"location":"android/troubleshooting/#issue-memory-leaks","title":"Issue: Memory Leaks","text":"<pre><code>Error: Memory leak detected\n</code></pre> <p>Solutions:</p> <ol> <li>Handle activity lifecycle:</li> </ol> <pre><code>override fun onDestroy() {\n    webView.clearCache(true)\n    webView.clearHistory()\n    webView.destroy()\n    super.onDestroy()\n}\n</code></pre> <ol> <li>Monitor memory:</li> </ol> <pre><code>class MemoryMonitor {\n    fun logMemoryInfo(context: Context) {\n        val runtime = Runtime.getRuntime()\n        val usedMemInMB = (runtime.totalMemory() - runtime.freeMemory()) / 1048576L\n        Log.d(\"MemoryMonitor\", \"Used memory: $usedMemInMB MB\")\n    }\n}\n</code></pre>"},{"location":"android/troubleshooting/#debug-tools","title":"Debug Tools","text":""},{"location":"android/troubleshooting/#logging","title":"Logging","text":"<ol> <li>Enable SDK logging:</li> </ol> <pre><code>SquadSDK.setLogLevel(LogLevel.DEBUG)\n</code></pre> <ol> <li>Add debug interceptor:</li> </ol> <pre><code>class DebugInterceptor : Interceptor {\n    override fun intercept(chain: Interceptor.Chain): Response {\n        val request = chain.request()\n        Log.d(\"SquadSDK\", \"Request: ${request.url}\")\n        return chain.proceed(request)\n    }\n}\n</code></pre>"},{"location":"android/troubleshooting/#performance-monitoring","title":"Performance Monitoring","text":"<p>Monitor WebView performance:</p> <pre><code>webView.setWebViewClient(object : WebViewClient() {\n    override fun onPageStarted(view: WebView, url: String, favicon: Bitmap?) {\n        startTime = System.currentTimeMillis()\n    }\n\n    override fun onPageFinished(view: WebView, url: String) {\n        val loadTime = System.currentTimeMillis() - startTime\n        Log.d(\"SquadSDK\", \"Page load time: $loadTime ms\")\n    }\n})\n</code></pre>"},{"location":"android/troubleshooting/#configuration-changes","title":"Configuration Changes","text":"<p>Handle configuration changes properly:</p> <pre><code>override fun onConfigurationChanged(newConfig: Configuration) {\n    super.onConfigurationChanged(newConfig)\n    // Handle configuration change\n    webView.requestLayout()\n}\n</code></pre>"},{"location":"android/troubleshooting/#related-resources","title":"Related Resources","text":"<ul> <li>General Troubleshooting Guide</li> <li>Android Configuration Guide</li> <li>Android WebView Management</li> <li>ProGuard Configuration</li> </ul>"},{"location":"android/troubleshooting/#support","title":"Support","text":"<p>When contacting support, provide:</p> <ul> <li>Android Studio version</li> <li>Android OS version</li> <li>Device model</li> <li>SDK version</li> <li>Error logs</li> <li>Steps to reproduce</li> <li>Sample project (if possible)</li> <li>ProGuard mapping file (if applicable)</li> </ul>"},{"location":"android/user-auth/","title":"User Authentication with Squad SDK for Android","text":"<p>To access Squad features within your app, users need to be authenticated. The Squad SDK for Android supports two methods of user authentication: email and access token.</p>"},{"location":"android/user-auth/#email-authentication","title":"Email Authentication","text":"<p>If your app collects user email addresses, you can use them to authenticate users with the Squad SDK.</p> <pre><code>squadSDK.initializeUser(\n    identifier = \"user@example.com\",\n    authType = AuthType.EMAIL\n) { result -&gt;\n    when (result) {\n        is UserInitResult.Success -&gt; {\n            // User initialized successfully\n            val user = result.user\n            Log.d(\"SquadSDK\", \"User authenticated: ${user.id}\")\n        }\n        is UserInitResult.Error -&gt; {\n            // Handle authentication error\n            Log.e(\"SquadSDK\", \"Authentication failed: ${result.error.message}\")\n        }\n    }\n}\n</code></pre>"},{"location":"android/user-auth/#access-token-authentication","title":"Access Token Authentication","text":"<p>If your app already has an authentication system in place, you can use access tokens to authenticate users with the Squad SDK.</p> <pre><code>squadSDK.initializeUser(\n    identifier = \"YOUR_ACCESS_TOKEN\",\n    authType = AuthType.TOKEN\n) { result -&gt;\n    when (result) {\n        is UserInitResult.Success -&gt; {\n            // User initialized successfully\n            val user = result.user\n            Log.d(\"SquadSDK\", \"User authenticated with token: ${user.id}\")\n        }\n        is UserInitResult.Error -&gt; {\n            // Handle authentication error\n            Log.e(\"SquadSDK\", \"Token authentication failed: ${result.error.message}\")\n        }\n    }\n}\n</code></pre>"},{"location":"android/user-auth/#user-management","title":"User Management","text":"<p>The Squad SDK provides methods to manage user sessions and authentication states.</p>"},{"location":"android/user-auth/#checking-authentication-state","title":"Checking Authentication State","text":"<pre><code>if (squadSDK.isUserAuthenticated()) {\n    // User is authenticated\n    val currentUser = squadSDK.getCurrentUser()\n    Log.d(\"SquadSDK\", \"Current user: ${currentUser.id}\")\n} else {\n    // User needs to authenticate\n    // Proceed with authentication flow\n}\n</code></pre>"},{"location":"android/user-auth/#logging-out","title":"Logging Out","text":"<p>To log out the current user:</p> <pre><code>squadSDK.logoutUser { result -&gt;\n    when (result) {\n        is LogoutResult.Success -&gt; {\n            Log.d(\"SquadSDK\", \"User logged out successfully\")\n            // Proceed to login screen\n        }\n        is LogoutResult.Error -&gt; {\n            Log.e(\"SquadSDK\", \"Logout failed: ${result.error.message}\")\n            // Handle logout error\n        }\n    }\n}\n</code></pre>"},{"location":"android/user-auth/#error-handling","title":"Error Handling","text":"<p>The SDK provides detailed error information through the <code>SquadError</code> class:</p> <pre><code>sealed class SquadError {\n    data class InvalidCredentials(val message: String) : SquadError()\n    data class NetworkError(val message: String) : SquadError()\n    data class SessionExpired(val message: String) : SquadError()\n    data class Unknown(val message: String) : SquadError()\n}\n\n// Example error handling\nsquadSDK.initializeUser(email = \"user@example.com\", authType = AuthType.EMAIL) { result -&gt;\n    when (result) {\n        is UserInitResult.Success -&gt; {\n            // Handle success\n        }\n        is UserInitResult.Error -&gt; {\n            when (val error = result.error) {\n                is SquadError.InvalidCredentials -&gt; {\n                    showError(\"Invalid email address\")\n                }\n                is SquadError.NetworkError -&gt; {\n                    showError(\"Network error: ${error.message}\")\n                }\n                is SquadError.SessionExpired -&gt; {\n                    // Handle session expiration\n                    refreshAuthentication()\n                }\n                is SquadError.Unknown -&gt; {\n                    showError(\"An unexpected error occurred\")\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"android/user-auth/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Error Handling</p> </li> <li> <p>Always handle authentication errors gracefully</p> </li> <li>Provide clear feedback to users</li> <li> <p>Implement proper retry mechanisms</p> </li> <li> <p>Token Management</p> </li> <li> <p>Store tokens securely using Android KeyStore</p> </li> <li>Implement token refresh mechanism</li> <li> <p>Handle token expiration properly</p> </li> <li> <p>Session Management</p> </li> <li>Monitor authentication state changes</li> <li>Handle background/foreground transitions</li> <li>Implement proper logout cleanup</li> </ol>"},{"location":"android/user-auth/#security-considerations","title":"Security Considerations","text":"<ol> <li>Secure Storage</li> </ol> <pre><code>class SecureTokenManager(private val context: Context) {\n    private val keyStore = KeyStore.getInstance(\"AndroidKeyStore\")\n\n    fun storeToken(token: String) {\n        // Encrypt and store token securely\n    }\n\n    fun retrieveToken(): String? {\n        // Decrypt and retrieve token\n    }\n}\n</code></pre> <ol> <li>Token Encryption</li> </ol> <pre><code>@RequiresApi(Build.VERSION_CODES.M)\nprivate fun encryptToken(token: String): ByteArray {\n    // Implement encryption using Android Keystore\n}\n</code></pre>"},{"location":"android/user-auth/#next-steps","title":"Next Steps","text":"<ul> <li>Present the Squad WebView</li> <li>Handle WebView Events</li> <li>Explore Squad Line capabilities</li> <li>Troubleshooting</li> </ul>"},{"location":"android/user-auth/#support","title":"Support","text":"<p>If you have any questions or need assistance:</p> <ul> <li>Visit our Support Center</li> <li>Contact us at support@squadforsports.com</li> </ul>"},{"location":"android/webview-events/","title":"Handling WebView Events with Squad SDK for Android","text":"<p>When using the Squad SDK for Android, you can listen for various events emitted by the WebView to perform actions or update your app's UI accordingly. This guide will walk you through the process of handling WebView events in your Android app.</p>"},{"location":"android/webview-events/#available-events","title":"Available Events","text":"<p>The Squad SDK for Android emits the following WebView events:</p> <ul> <li><code>onWebViewLoaded</code>: Triggered when the WebView finishes loading</li> <li><code>onWebViewError</code>: Triggered when the WebView encounters an error</li> <li><code>onWebViewDismissed</code>: Triggered when the WebView is dismissed</li> <li><code>onWebViewStateChanged</code>: Triggered when the WebView state changes</li> </ul>"},{"location":"android/webview-events/#implementing-the-event-listener","title":"Implementing the Event Listener","text":"<p>To listen for WebView events, implement the <code>SquadWebViewListener</code> interface:</p> <pre><code>class MainActivity : AppCompatActivity(), SquadWebViewListener {\n    private lateinit var squadSDK: SquadSDK\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        // Set the WebView listener\n        squadSDK.setWebViewListener(this)\n    }\n\n    override fun onWebViewLoaded() {\n        Log.d(\"SquadSDK\", \"WebView loaded successfully\")\n        // Handle WebView loaded event\n    }\n\n    override fun onWebViewError(error: SquadError) {\n        Log.e(\"SquadSDK\", \"WebView error: ${error.message}\")\n        // Handle WebView error\n    }\n\n    override fun onWebViewDismissed() {\n        Log.d(\"SquadSDK\", \"WebView dismissed\")\n        // Handle WebView dismissed\n    }\n\n    override fun onWebViewStateChanged(state: WebViewState) {\n        Log.d(\"SquadSDK\", \"WebView state changed: $state\")\n        // Handle state change\n    }\n}\n</code></pre>"},{"location":"android/webview-events/#handling-specific-events","title":"Handling Specific Events","text":""},{"location":"android/webview-events/#webview-loaded","title":"WebView Loaded","text":"<pre><code>override fun onWebViewLoaded() {\n    // Hide loading indicator\n    loadingProgressBar.visibility = View.GONE\n\n    // Enable interaction\n    webViewContainer.isEnabled = true\n\n    // Update UI state\n    updateUIState(SquadUIState.READY)\n}\n</code></pre>"},{"location":"android/webview-events/#webview-error","title":"WebView Error","text":"<pre><code>override fun onWebViewError(error: SquadError) {\n    when (error) {\n        is SquadError.NetworkError -&gt; {\n            showErrorDialog(\n                title = \"Connection Error\",\n                message = \"Please check your internet connection\"\n            )\n        }\n        is SquadError.LoadError -&gt; {\n            showErrorDialog(\n                title = \"Loading Error\",\n                message = error.message\n            )\n        }\n        else -&gt; {\n            showErrorDialog(\n                title = \"Error\",\n                message = \"An unexpected error occurred\"\n            )\n        }\n    }\n}\n\nprivate fun showErrorDialog(title: String, message: String) {\n    MaterialAlertDialogBuilder(this)\n        .setTitle(title)\n        .setMessage(message)\n        .setPositiveButton(\"Retry\") { _, _ -&gt;\n            reloadWebView()\n        }\n        .setNegativeButton(\"Cancel\") { _, _ -&gt;\n            finish()\n        }\n        .show()\n}\n</code></pre>"},{"location":"android/webview-events/#webview-dismissed","title":"WebView Dismissed","text":"<pre><code>override fun onWebViewDismissed() {\n    // Clean up resources\n    cleanupResources()\n\n    // Navigate back or update UI\n    supportFragmentManager.popBackStack()\n}\n\nprivate fun cleanupResources() {\n    // Perform cleanup tasks\n    squadSDK.clearWebViewCache()\n    // Release any held resources\n}\n</code></pre>"},{"location":"android/webview-events/#webview-state-changed","title":"WebView State Changed","text":"<pre><code>override fun onWebViewStateChanged(state: WebViewState) {\n    when (state) {\n        WebViewState.LOADING -&gt; {\n            showLoading()\n        }\n        WebViewState.READY -&gt; {\n            hideLoading()\n        }\n        WebViewState.ERROR -&gt; {\n            showError()\n        }\n    }\n}\n\nprivate fun showLoading() {\n    loadingProgressBar.visibility = View.VISIBLE\n    contentContainer.visibility = View.GONE\n}\n\nprivate fun hideLoading() {\n    loadingProgressBar.visibility = View.GONE\n    contentContainer.visibility = View.VISIBLE\n}\n\nprivate fun showError() {\n    errorView.visibility = View.VISIBLE\n    contentContainer.visibility = View.GONE\n}\n</code></pre>"},{"location":"android/webview-events/#configuration-options","title":"Configuration Options","text":"<p>You can customize WebView behavior through configuration:</p> <pre><code>val config = WebViewConfiguration.Builder()\n    .setLoadTimeout(timeoutMs = 10000)\n    .setRetryCount(maxRetries = 3)\n    .setErrorHandling(strategy = ErrorHandlingStrategy.RETRY)\n    .build()\n\nsquadSDK.presentWebView(\n    activity = this,\n    configuration = config\n)\n</code></pre>"},{"location":"android/webview-events/#lifecycle-management","title":"Lifecycle Management","text":"<p>Proper lifecycle management is crucial for WebView events:</p> <pre><code>class SquadActivity : AppCompatActivity(), SquadWebViewListener {\n    override fun onResume() {\n        super.onResume()\n        squadSDK.setWebViewListener(this)\n    }\n\n    override fun onPause() {\n        super.onPause()\n        squadSDK.removeWebViewListener()\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        squadSDK.cleanup()\n    }\n}\n</code></pre>"},{"location":"android/webview-events/#error-recovery","title":"Error Recovery","text":"<p>Implement recovery strategies for WebView errors:</p> <pre><code>private fun handleWebViewRecovery() {\n    val recoveryStrategy = WebViewRecoveryStrategy.Builder()\n        .setMaxRetries(3)\n        .setRetryDelay(1000)\n        .setProgressiveDelay(true)\n        .build()\n\n    squadSDK.setRecoveryStrategy(recoveryStrategy)\n}\n</code></pre>"},{"location":"android/webview-events/#best-practices","title":"Best Practices","text":"<ol> <li>Always handle all possible WebView events</li> <li>Implement proper error recovery mechanisms</li> <li>Manage lifecycle events correctly</li> <li>Clean up resources when WebView is dismissed</li> <li>Provide clear feedback to users during state changes</li> </ol>"},{"location":"android/webview-events/#next-steps","title":"Next Steps","text":"<ul> <li>Explore Squad Line capabilities</li> <li>Review Troubleshooting guide</li> </ul>"},{"location":"android/webview-events/#support","title":"Support","text":"<p>If you have any questions or need assistance:</p> <ul> <li>Visit our Support Center</li> <li>Contact us at support@squadforsports.com</li> </ul>"},{"location":"android/webview/","title":"Android WebView Management","text":""},{"location":"android/webview/#overview","title":"Overview","text":"<p>The Squad SDK uses Android WebView to provide seamless integration of Squad features into your Android application. This guide covers WebView setup, management, and optimization.</p>"},{"location":"android/webview/#webview-setup","title":"WebView Setup","text":""},{"location":"android/webview/#basic-implementation","title":"Basic Implementation","text":"<pre><code>class SquadActivity : AppCompatActivity() {\n    private lateinit var webView: WebView\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setupWebView()\n    }\n\n    private fun setupWebView() {\n        webView = WebView(this).apply {\n            layoutParams = ViewGroup.LayoutParams(\n                ViewGroup.LayoutParams.MATCH_PARENT,\n                ViewGroup.LayoutParams.MATCH_PARENT\n            )\n\n            settings.apply {\n                javaScriptEnabled = true\n                domStorageEnabled = true\n                mediaPlaybackRequiresUserGesture = false\n                mixedContentMode = WebSettings.MIXED_CONTENT_NEVER_ALLOW\n            }\n\n            webViewClient = SquadWebViewClient()\n            webChromeClient = SquadWebChromeClient()\n        }\n\n        setContentView(webView)\n    }\n}\n</code></pre>"},{"location":"android/webview/#custom-configuration","title":"Custom Configuration","text":"<pre><code>class SquadWebViewClient : WebViewClient() {\n    override fun shouldOverrideUrlLoading(\n        view: WebView,\n        request: WebResourceRequest\n    ): Boolean {\n        // Handle URL loading\n        return if (request.url.host?.endsWith(\"squadforsports.com\") == true) {\n            false // Let WebView handle Squad URLs\n        } else {\n            handleExternalUrl(request.url)\n            true\n        }\n    }\n\n    override fun onReceivedSslError(\n        view: WebView,\n        handler: SslErrorHandler,\n        error: SslError\n    ) {\n        if (BuildConfig.DEBUG) {\n            handler.proceed() // Only in debug builds\n        } else {\n            handler.cancel()\n        }\n    }\n}\n\nclass SquadWebChromeClient : WebChromeClient() {\n    override fun onPermissionRequest(request: PermissionRequest) {\n        // Handle permissions for camera/microphone\n        request.grant(request.resources)\n    }\n}\n</code></pre>"},{"location":"android/webview/#bridge-communication","title":"Bridge Communication","text":""},{"location":"android/webview/#javascript-interface-setup","title":"JavaScript Interface Setup","text":"<pre><code>class SquadJavaScriptInterface(\n    private val context: Context,\n    private val messageHandler: BridgeMessageHandler\n) {\n    @JavascriptInterface\n    fun postMessage(message: String) {\n        try {\n            val jsonMessage = JSONObject(message)\n            messageHandler.handleMessage(jsonMessage)\n        } catch (e: JSONException) {\n            Log.e(\"SquadSDK\", \"Invalid bridge message\", e)\n        }\n    }\n}\n\n// Setting up the interface\nwebView.addJavascriptInterface(\n    SquadJavaScriptInterface(context, messageHandler),\n    \"SquadAndroid\"\n)\n</code></pre>"},{"location":"android/webview/#message-handling","title":"Message Handling","text":"<pre><code>class BridgeMessageHandler {\n    fun handleMessage(message: JSONObject) {\n        when (message.optString(\"type\")) {\n            \"call\" -&gt; handleCallEvent(message)\n            \"navigation\" -&gt; handleNavigation(message)\n            \"error\" -&gt; handleError(message)\n            else -&gt; Log.w(\"SquadSDK\", \"Unknown message type\")\n        }\n    }\n\n    fun sendToBridge(message: JSONObject) {\n        val jsonString = message.toString()\n        webView.post {\n            webView.evaluateJavascript(\n                \"window.squadBridge.handleNativeMessage($jsonString)\"\n            ) { result -&gt;\n                // Handle result if needed\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"android/webview/#state-management","title":"State Management","text":""},{"location":"android/webview/#webview-state-tracking","title":"WebView State Tracking","text":"<pre><code>sealed class WebViewState {\n    object Loading : WebViewState()\n    object Ready : WebViewState()\n    data class Error(val error: Throwable) : WebViewState()\n}\n\nclass SquadWebViewClient : WebViewClient() {\n    private val _state = MutableStateFlow&lt;WebViewState&gt;(WebViewState.Loading)\n    val state: StateFlow&lt;WebViewState&gt; = _state.asStateFlow()\n\n    override fun onPageStarted(view: WebView, url: String, favicon: Bitmap?) {\n        super.onPageStarted(view, url, favicon)\n        _state.value = WebViewState.Loading\n    }\n\n    override fun onPageFinished(view: WebView, url: String) {\n        super.onPageFinished(view, url)\n        _state.value = WebViewState.Ready\n    }\n\n    override fun onReceivedError(\n        view: WebView,\n        request: WebResourceRequest,\n        error: WebResourceError\n    ) {\n        super.onReceivedError(view, request, error)\n        _state.value = WebViewState.Error(WebViewException(error))\n    }\n}\n</code></pre>"},{"location":"android/webview/#session-management","title":"Session Management","text":"<pre><code>class SessionManager(private val context: Context) {\n    fun clearSession() {\n        WebStorage.getInstance().deleteAllData()\n\n        context.deleteDatabase(\"webview.db\")\n        context.deleteDatabase(\"webviewCache.db\")\n\n        CookieManager.getInstance().removeAllCookies(null)\n    }\n\n    fun persistSession() {\n        CookieManager.getInstance().flush()\n    }\n}\n</code></pre>"},{"location":"android/webview/#security-implementation","title":"Security Implementation","text":""},{"location":"android/webview/#content-security-policy","title":"Content Security Policy","text":"<pre><code>class SecurityConfig {\n    private val cspRules = \"\"\"\n        default-src 'self' https://*.squadforsports.com;\n        script-src 'self' 'unsafe-inline' https://*.squadforsports.com;\n        style-src 'self' 'unsafe-inline' https://*.squadforsports.com;\n        img-src 'self' data: https://*.squadforsports.com;\n    \"\"\".trimIndent()\n\n    fun injectCSP(webView: WebView) {\n        webView.evaluateJavascript(\"\"\"\n            const meta = document.createElement('meta');\n            meta.httpEquiv = 'Content-Security-Policy';\n            meta.content = '$cspRules';\n            document.head.appendChild(meta);\n        \"\"\".trimIndent(), null)\n    }\n}\n</code></pre>"},{"location":"android/webview/#safe-browsing","title":"Safe Browsing","text":"<pre><code>class SafeBrowsingConfig(context: Context) {\n    init {\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O_MR1) {\n            WebView.startSafeBrowsing(context) { success -&gt;\n                Log.d(\"SquadSDK\", \"Safe Browsing initialization: $success\")\n            }\n        }\n    }\n\n    fun configureSafeBrowsing(webView: WebView) {\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O_MR1) {\n            webView.settings.safeBrowsingEnabled = true\n        }\n    }\n}\n</code></pre>"},{"location":"android/webview/#performance-optimization","title":"Performance Optimization","text":""},{"location":"android/webview/#memory-management","title":"Memory Management","text":"<pre><code>class MemoryManager {\n    fun optimizeMemoryUsage(webView: WebView) {\n        // Clear cache when low on memory\n        webView.clearCache(true)\n\n        // Trim memory when needed\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n            webView.setRendererPriorityPolicy(\n                WebView.RENDERER_PRIORITY_BOUND,\n                true\n            )\n        }\n    }\n}\n\nclass SquadActivity : AppCompatActivity() {\n    override fun onTrimMemory(level: Int) {\n        super.onTrimMemory(level)\n        if (level &gt;= ComponentCallbacks2.TRIM_MEMORY_MODERATE) {\n            memoryManager.optimizeMemoryUsage(webView)\n        }\n    }\n}\n</code></pre>"},{"location":"android/webview/#resource-loading-optimization","title":"Resource Loading Optimization","text":"<pre><code>class ResourceOptimizer {\n    fun configureResourceLoading(webView: WebView) {\n        webView.settings.apply {\n            // Enable caching\n            cacheMode = WebSettings.LOAD_DEFAULT\n\n            // Enable app cache\n            setAppCacheEnabled(true)\n            setAppCachePath(webView.context.cacheDir.absolutePath)\n\n            // Enable compression\n            loadsImagesAutomatically = true\n            blockNetworkImage = false\n\n            // Enable local storage\n            databaseEnabled = true\n            domStorageEnabled = true\n        }\n    }\n}\n</code></pre>"},{"location":"android/webview/#error-handling","title":"Error Handling","text":"<pre><code>class ErrorHandler {\n    fun handleWebViewError(error: WebResourceError, request: WebResourceRequest) {\n        when (error.errorCode) {\n            ERROR_HOST_LOOKUP -&gt; showOfflineView()\n            ERROR_TIMEOUT -&gt; retryLoading()\n            else -&gt; showErrorView(error.description.toString())\n        }\n    }\n\n    private fun retryLoading() {\n        // Implement retry logic\n        webView.reload()\n    }\n}\n</code></pre>"},{"location":"android/webview/#lifecycle-management","title":"Lifecycle Management","text":"<pre><code>class SquadActivity : AppCompatActivity() {\n    override fun onResume() {\n        super.onResume()\n        webView.onResume()\n        webView.resumeTimers()\n    }\n\n    override fun onPause() {\n        webView.pauseTimers()\n        webView.onPause()\n        super.onPause()\n    }\n\n    override fun onDestroy() {\n        webView.stopLoading()\n        webView.clearHistory()\n        webView.clearCache(true)\n        webView.destroy()\n        super.onDestroy()\n    }\n\n    override fun onConfigurationChanged(newConfig: Configuration) {\n        super.onConfigurationChanged(newConfig)\n        // Handle configuration changes\n    }\n}\n</code></pre>"},{"location":"android/webview/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Security</p> </li> <li> <p>Enable Safe Browsing</p> </li> <li>Implement proper CSP</li> <li>Handle SSL errors correctly</li> <li> <p>Validate all URLs</p> </li> <li> <p>Performance</p> </li> <li> <p>Handle memory constraints</p> </li> <li>Implement efficient caching</li> <li>Optimize resource loading</li> <li> <p>Handle configuration changes</p> </li> <li> <p>User Experience</p> </li> <li> <p>Handle offline state</p> </li> <li>Provide loading indicators</li> <li>Implement error recovery</li> <li> <p>Maintain state during rotations</p> </li> <li> <p>Debugging</p> </li> <li>Enable WebView debugging</li> <li>Monitor memory usage</li> <li>Track performance metrics</li> <li>Log bridge communications</li> </ol>"},{"location":"android/webview/#related-documentation","title":"Related Documentation","text":"<ul> <li>Configuration Guide</li> <li>Troubleshooting</li> </ul>"},{"location":"concepts/","title":"Key Concepts","text":""},{"location":"concepts/#overview","title":"Overview","text":"<p>The Squad SDK enables seamless integration of social features and voice calling capabilities into mobile applications. This guide covers the fundamental concepts and architecture that form the foundation of the Squad SDK.</p>"},{"location":"concepts/#core-components","title":"Core Components","text":""},{"location":"concepts/#1-sdk-manager","title":"1. SDK Manager","text":"<p>The SDK Manager is the central component that handles:</p> <ul> <li>SDK initialization</li> <li>Configuration management</li> <li>Resource coordination</li> <li>Lifecycle management</li> </ul> <pre><code>graph TD\n    A[SDK Manager] --&gt; B[Authentication]\n    A --&gt; C[WebView Bridge]\n    A --&gt; D[Voice Manager]\n    A --&gt; E[Event Handler]\n</code></pre>"},{"location":"concepts/#2-webview-integration","title":"2. WebView Integration","text":"<p>The Squad experience is delivered through a WebView component that:</p> <ul> <li>Provides the user interface</li> <li>Handles user interactions</li> <li>Manages navigation</li> <li>Coordinates with native features</li> </ul>"},{"location":"concepts/#3-bridge-architecture","title":"3. Bridge Architecture","text":"<p>The Bridge system facilitates communication between:</p> <ul> <li>Native SDK components</li> <li>WebView content</li> <li>Voice calling features</li> <li>Parent application</li> </ul> <pre><code>sequenceDiagram\n    participant App\n    participant Bridge\n    participant WebView\n    participant Voice\n\n    App-&gt;&gt;Bridge: Initialize\n    Bridge-&gt;&gt;WebView: Setup Connection\n    Bridge-&gt;&gt;Voice: Configure\n    WebView-&gt;&gt;Bridge: User Action\n    Bridge-&gt;&gt;Voice: Handle Call\n</code></pre>"},{"location":"concepts/#key-features","title":"Key Features","text":""},{"location":"concepts/#1-authentication-flow","title":"1. Authentication Flow","text":"<p>Squad SDK supports multiple authentication methods:</p> <ul> <li>Email-based authentication</li> <li>Token-based authentication</li> <li>Session management</li> <li>Secure credential storage</li> </ul>"},{"location":"concepts/#2-voice-calling-squad-line","title":"2. Voice Calling (Squad Line)","text":"<p>Voice calling features include:</p> <ul> <li>Real-time communication</li> <li>Custom call titles</li> <li>Emoji reactions</li> <li>Call quality management</li> </ul>"},{"location":"concepts/#3-social-features","title":"3. Social Features","text":"<p>Integrated social capabilities:</p> <ul> <li>Freestyles</li> <li>Polls</li> <li>Squad management</li> <li>Friend connections</li> </ul>"},{"location":"concepts/#architecture-patterns","title":"Architecture Patterns","text":""},{"location":"concepts/#1-event-driven-architecture","title":"1. Event-Driven Architecture","text":"<pre><code>graph LR\n    A[Event Source] --&gt; B[Event Bus]\n    B --&gt; C[Event Handlers]\n    B --&gt; D[Analytics]\n    B --&gt; E[State Management]\n</code></pre> <p>The SDK uses an event-driven architecture to:</p> <ul> <li>Handle user interactions</li> <li>Manage state changes</li> <li>Coordinate components</li> <li>Track analytics</li> </ul>"},{"location":"concepts/#2-state-management","title":"2. State Management","text":"<p>State management encompasses:</p> <ul> <li>User session state</li> <li>Call state</li> <li>WebView state</li> <li>Connection state</li> </ul>"},{"location":"concepts/#integration-lifecycle","title":"Integration Lifecycle","text":""},{"location":"concepts/#1-initialization-phase","title":"1. Initialization Phase","text":"<pre><code>// 1. SDK Initialization\nSquadSDK.initialize(config)\n\n// 2. User Authentication\nSquadSDK.authenticate(credentials)\n\n// 3. WebView Presentation\nSquadSDK.presentWebView()\n</code></pre>"},{"location":"concepts/#2-runtime-phase","title":"2. Runtime Phase","text":"<p>During runtime, the SDK manages:</p> <ul> <li>State synchronization</li> <li>Event handling</li> <li>Resource management</li> <li>Error recovery</li> </ul>"},{"location":"concepts/#3-cleanup-phase","title":"3. Cleanup Phase","text":"<p>Proper cleanup includes:</p> <ul> <li>Resource release</li> <li>State persistence</li> <li>Connection termination</li> <li>Cache management</li> </ul>"},{"location":"concepts/#data-flow","title":"Data Flow","text":""},{"location":"concepts/#1-client-server-communication","title":"1. Client-Server Communication","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant SDK\n    participant Server\n\n    Client-&gt;&gt;SDK: API Request\n    SDK-&gt;&gt;Server: HTTP/WebSocket\n    Server--&gt;&gt;SDK: Response\n    SDK--&gt;&gt;Client: Processed Data\n</code></pre>"},{"location":"concepts/#2-webview-native-bridge","title":"2. WebView-Native Bridge","text":"<p>The bridge facilitates:</p> <ul> <li>Bi-directional communication</li> <li>Event synchronization</li> <li>State management</li> <li>Resource sharing</li> </ul>"},{"location":"concepts/#security-model","title":"Security Model","text":""},{"location":"concepts/#1-authentication-security","title":"1. Authentication Security","text":"<ul> <li>Secure credential storage</li> <li>Token management</li> <li>Session handling</li> <li>Access control</li> </ul>"},{"location":"concepts/#2-data-security","title":"2. Data Security","text":"<ul> <li>End-to-end encryption</li> <li>Certificate pinning</li> <li>Secure storage</li> <li>Data privacy</li> </ul>"},{"location":"concepts/#best-practices","title":"Best Practices","text":""},{"location":"concepts/#1-implementation-guidelines","title":"1. Implementation Guidelines","text":"<ul> <li>Initialize SDK early in app lifecycle</li> <li>Handle lifecycle events properly</li> <li>Implement proper error handling</li> <li>Manage resources efficiently</li> </ul>"},{"location":"concepts/#2-performance-optimization","title":"2. Performance Optimization","text":"<ul> <li>Optimize memory usage</li> <li>Manage network efficiently</li> <li>Handle background states</li> <li>Cache appropriately</li> </ul>"},{"location":"concepts/#advanced-concepts","title":"Advanced Concepts","text":""},{"location":"concepts/#1-custom-integration","title":"1. Custom Integration","text":"<p>Customization options include:</p> <ul> <li>UI/UX customization</li> <li>Custom event handling</li> <li>Analytics integration</li> <li>Error handling</li> </ul>"},{"location":"concepts/#2-advanced-features","title":"2. Advanced Features","text":"<p>Advanced capabilities:</p> <ul> <li>Background processing</li> <li>Push notifications</li> <li>Deep linking</li> <li>State restoration</li> </ul>"},{"location":"concepts/#platform-considerations","title":"Platform Considerations","text":""},{"location":"concepts/#ios-specific-concepts","title":"iOS-Specific Concepts","text":"<ul> <li>View controller hierarchy</li> <li>Memory management</li> <li>Background tasks</li> <li>App lifecycle</li> </ul>"},{"location":"concepts/#android-specific-concepts","title":"Android-Specific Concepts","text":"<ul> <li>Activity/Fragment lifecycle</li> <li>Process lifecycle</li> <li>Configuration changes</li> <li>Memory constraints</li> </ul>"},{"location":"concepts/#next-steps","title":"Next Steps","text":"<ul> <li>Review SDK Initialization</li> <li>Explore Authentication</li> <li>Learn about WebView Integration</li> </ul>"},{"location":"concepts/#additional-resources","title":"Additional Resources","text":"<ul> <li>iOS Implementation Guide</li> <li>Android Implementation Guide</li> </ul>"},{"location":"ios/configuration/","title":"iOS Configuration Guide","text":""},{"location":"ios/configuration/#overview","title":"Overview","text":"<p>This guide covers all configuration options available in the Squad SDK for iOS, including initialization, security, networking, and feature-specific settings.</p>"},{"location":"ios/configuration/#basic-configuration","title":"Basic Configuration","text":""},{"location":"ios/configuration/#sdk-configuration","title":"SDK Configuration","text":"<pre><code>struct SquadConfig {\n    let organizationId: String\n    let apiKey: String\n    let environment: Environment\n    let logLevel: LogLevel\n}\n\nlet config = SquadConfig(\n    organizationId: \"YOUR_ORG_ID\",\n    apiKey: \"YOUR_API_KEY\",\n    environment: .production,\n    logLevel: .info\n)\n\ntry SquadSDK.initialize(with: config)\n</code></pre>"},{"location":"ios/configuration/#environment-configuration","title":"Environment Configuration","text":"<pre><code>enum Environment {\n    case production\n    case staging\n    case development(url: URL)\n}\n\n// Custom environment setup\nlet customConfig = SquadConfig(\n    organizationId: \"YOUR_ORG_ID\",\n    apiKey: \"YOUR_API_KEY\",\n    environment: .development(url: URL(string: \"https://dev-api.yourdomain.com\")!),\n    logLevel: .debug\n)\n</code></pre>"},{"location":"ios/configuration/#security-configuration","title":"Security Configuration","text":""},{"location":"ios/configuration/#certificate-pinning","title":"Certificate Pinning","text":"<pre><code>let certificateConfig = CertificatePinningConfiguration(\n    certificates: [\"sha256/XXXX\", \"sha256/YYYY\"],\n    includeDefaultCertificates: true\n)\n\nSquadSDK.shared.setCertificatePinning(config: certificateConfig)\n</code></pre>"},{"location":"ios/configuration/#user-data-protection","title":"User Data Protection","text":"<pre><code>let securityConfig = SecurityConfiguration(\n    dataEncryption: .enabled,\n    biometricAuth: .optional,\n    secureStorage: .keychain\n)\n\nSquadSDK.shared.setSecurityConfiguration(securityConfig)\n</code></pre>"},{"location":"ios/configuration/#network-configuration","title":"Network Configuration","text":""},{"location":"ios/configuration/#timeouts-and-retries","title":"Timeouts and Retries","text":"<pre><code>let networkConfig = NetworkConfiguration(\n    connectionTimeout: 30,\n    readTimeout: 30,\n    writeTimeout: 30,\n    maxRetries: 3,\n    retryBackoff: .exponential(initial: 1, multiplier: 2)\n)\n\nSquadSDK.shared.setNetworkConfiguration(networkConfig)\n</code></pre>"},{"location":"ios/configuration/#caching-strategy","title":"Caching Strategy","text":"<pre><code>let cacheConfig = CacheConfiguration(\n    diskCapacity: 50 * 1024 * 1024, // 50 MB\n    memoryCapacity: 10 * 1024 * 1024, // 10 MB\n    timeToLive: 3600 // 1 hour\n)\n\nSquadSDK.shared.setCacheConfiguration(cacheConfig)\n</code></pre>"},{"location":"ios/configuration/#webview-configuration","title":"WebView Configuration","text":""},{"location":"ios/configuration/#basic-setup","title":"Basic Setup","text":"<pre><code>let webViewConfig = WebViewConfiguration(\n    allowsInlineMediaPlayback: true,\n    mediaPlaybackRequiresUserAction: false,\n    dataDetectorTypes: [.link, .phoneNumber]\n)\n\nSquadSDK.shared.setWebViewConfiguration(webViewConfig)\n</code></pre>"},{"location":"ios/configuration/#content-configuration","title":"Content Configuration","text":"<pre><code>let contentConfig = ContentConfiguration(\n    allowedContentTypes: [.all],\n    javascriptEnabled: true,\n    domStorageEnabled: true,\n    userScalable: false\n)\n\nwebViewConfig.setContentConfiguration(contentConfig)\n</code></pre>"},{"location":"ios/configuration/#voice-call-configuration","title":"Voice Call Configuration","text":""},{"location":"ios/configuration/#audio-settings","title":"Audio Settings","text":"<pre><code>let audioConfig = AudioConfiguration(\n    audioMode: .voiceChat,\n    acousticEchoCancellation: true,\n    noiseSuppression: true,\n    automaticGainControl: true\n)\n\nSquadSDK.shared.setAudioConfiguration(audioConfig)\n</code></pre>"},{"location":"ios/configuration/#call-quality","title":"Call Quality","text":"<pre><code>let qualityConfig = CallQualityConfiguration(\n    bitrateMode: .adaptive,\n    minimumBitrate: 8000,\n    maximumBitrate: 32000,\n    opusMode: .voip\n)\n\nSquadSDK.shared.setCallQualityConfiguration(qualityConfig)\n</code></pre>"},{"location":"ios/configuration/#analytics-configuration","title":"Analytics Configuration","text":"<pre><code>let analyticsConfig = AnalyticsConfiguration(\n    enabled: true,\n    trackingEvents: [\n        .calls,\n        .errors,\n        .performance\n    ],\n    customDimensions: [\n        \"app_version\": Bundle.main.version,\n        \"environment\": \"production\"\n    ]\n)\n\nSquadSDK.shared.setAnalyticsConfiguration(analyticsConfig)\n</code></pre>"},{"location":"ios/configuration/#error-handling-configuration","title":"Error Handling Configuration","text":"<pre><code>let errorConfig = ErrorConfiguration(\n    retryableErrors: [.network, .timeout],\n    maxRetries: 3,\n    errorCallback: { error in\n        // Handle errors\n        Logger.error(\"Squad SDK Error: \\(error)\")\n    }\n)\n\nSquadSDK.shared.setErrorConfiguration(errorConfig)\n</code></pre>"},{"location":"ios/configuration/#resource-management","title":"Resource Management","text":""},{"location":"ios/configuration/#memory-management","title":"Memory Management","text":"<pre><code>let memoryConfig = MemoryConfiguration(\n    lowMemoryThreshold: 50 * 1024 * 1024, // 50 MB\n    criticalMemoryThreshold: 25 * 1024 * 1024, // 25 MB\n    cleanupCallback: {\n        // Perform cleanup\n    }\n)\n\nSquadSDK.shared.setMemoryConfiguration(memoryConfig)\n</code></pre>"},{"location":"ios/configuration/#background-tasks","title":"Background Tasks","text":"<pre><code>let backgroundConfig = BackgroundConfiguration(\n    allowedTasks: [.voiceCalls, .messageDelivery],\n    timeoutInterval: 30,\n    completionHandler: { result in\n        // Handle background task completion\n    }\n)\n\nSquadSDK.shared.setBackgroundConfiguration(backgroundConfig)\n</code></pre>"},{"location":"ios/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"ios/configuration/#custom-event-handling","title":"Custom Event Handling","text":"<pre><code>let eventConfig = EventConfiguration(\n    customEventHandler: { event in\n        switch event {\n        case .callStarted(let callId):\n            // Handle call start\n        case .callEnded(let callId, let duration):\n            // Handle call end\n        case .error(let error):\n            // Handle error\n        }\n    }\n)\n\nSquadSDK.shared.setEventConfiguration(eventConfig)\n</code></pre>"},{"location":"ios/configuration/#debug-configuration","title":"Debug Configuration","text":"<pre><code>#if DEBUG\nlet debugConfig = DebugConfiguration(\n    logLevel: .debug,\n    networkLogging: true,\n    performanceMetrics: true,\n    screenshotEnabled: true\n)\n\nSquadSDK.shared.setDebugConfiguration(debugConfig)\n#endif\n</code></pre>"},{"location":"ios/configuration/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Security</p> </li> <li> <p>Always enable certificate pinning in production</p> </li> <li>Use secure storage for sensitive data</li> <li> <p>Configure appropriate timeout values</p> </li> <li> <p>Performance</p> </li> <li> <p>Configure appropriate cache sizes</p> </li> <li>Implement memory management</li> <li> <p>Handle background tasks efficiently</p> </li> <li> <p>Error Handling</p> </li> <li> <p>Configure comprehensive error handling</p> </li> <li>Implement appropriate retry strategies</li> <li> <p>Log errors appropriately</p> </li> <li> <p>Testing</p> </li> <li>Use staging environment for testing</li> <li>Enable debug logging in development</li> <li>Test with various network conditions</li> </ol>"},{"location":"ios/configuration/#related-documentation","title":"Related Documentation","text":"<ul> <li>Installation Guide</li> <li>WebView Management</li> <li>Troubleshooting</li> </ul>"},{"location":"ios/getting-started/","title":"Getting Started with Squad SDK for iOS","text":"<p>This guide will help you integrate the Squad SDK into your iOS app, enabling social features and voice calling capabilities.</p>"},{"location":"ios/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>A Squad developer account and credentials</li> <li>Xcode 13.0 or later</li> <li>iOS 13.0 or later</li> <li>Swift 5.3 or later</li> </ul>"},{"location":"ios/getting-started/#installation-methods","title":"Installation Methods","text":""},{"location":"ios/getting-started/#swift-package-manager-recommended","title":"Swift Package Manager (Recommended)","text":"<ol> <li>In Xcode, select File &gt; Add Package Dependencies...</li> <li>Enter the repository URL:</li> </ol> <pre><code>https://github.com/withyoursquad/squad-sports-ios.git\n</code></pre> <ol> <li>Select version settings:</li> <li>Rules: Version - Up to Next Major</li> <li>Version: 1.0.0 or later</li> </ol>"},{"location":"ios/getting-started/#cocoapods","title":"CocoaPods","text":"<ol> <li>Add to your Podfile:</li> </ol> <pre><code>pod 'SquadSDK', '~&gt; 1.0.0'\n</code></pre> <ol> <li>Install the dependency:</li> </ol> <pre><code>pod install\n</code></pre> <p>For detailed installation options and troubleshooting, see our Installation Guide.</p>"},{"location":"ios/getting-started/#quick-start-guide","title":"Quick Start Guide","text":""},{"location":"ios/getting-started/#1-sdk-initialization","title":"1. SDK Initialization","text":"<p>Import and initialize the SDK:</p> <pre><code>import SquadSDK\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {\n    do {\n        let config = SquadConfig(\n            organizationId: \"YOUR_ORG_ID\",\n            apiKey: \"YOUR_API_KEY\",\n            environment: .production\n        )\n        try SquadSDK.initialize(with: config)\n        print(\"Squad SDK initialized successfully\")\n    } catch {\n        print(\"Failed to initialize Squad SDK: \\(error)\")\n    }\n    return true\n}\n</code></pre> <p>For advanced configuration options, see our Configuration Guide.</p>"},{"location":"ios/getting-started/#2-user-authentication","title":"2. User Authentication","text":"<p>Authenticate users using email or token:</p> <pre><code>try squadSDK.authenticateUser(\n    identifier: \"user@example.com\",\n    authType: .email\n) { result in\n    switch result {\n    case .success(let user):\n        print(\"User authenticated: \\(user.id)\")\n    case .failure(let error):\n        print(\"Authentication failed: \\(error)\")\n    }\n}\n</code></pre> <p>Learn more in our User Authentication Guide.</p>"},{"location":"ios/getting-started/#3-webview-integration","title":"3. WebView Integration","text":"<p>Present the Squad experience:</p> <pre><code>class ViewController: UIViewController {\n    func showSquadExperience() {\n        do {\n            let webView = try squadSDK.presentWebView(\n                configuration: WebViewConfig(\n                    features: [.voiceCalls, .freestyles, .polls]\n                )\n            )\n            view.addSubview(webView)\n            setupWebViewConstraints(webView)\n        } catch {\n            print(\"Failed to present Squad WebView: \\(error)\")\n        }\n    }\n}\n</code></pre> <p>For comprehensive WebView management, see our WebView Management Guide.</p>"},{"location":"ios/getting-started/#integration-guides","title":"Integration Guides","text":"<ul> <li>Installation &amp; Setup - Detailed installation steps</li> <li>Configuration Guide - Advanced SDK configuration</li> <li>WebView Management - WebView integration and management</li> <li>User Authentication - Authentication implementation</li> <li>WebView Events - Event handling guide</li> </ul>"},{"location":"ios/getting-started/#troubleshooting","title":"Troubleshooting","text":"<p>For common issues and solutions, see our Troubleshooting Guide.</p>"},{"location":"ios/getting-started/#additional-resources","title":"Additional Resources","text":"<ul> <li>Sample Projects</li> </ul>"},{"location":"ios/getting-started/#support","title":"Support","text":"<p>Need help? Our support team is ready to assist:</p> <ul> <li>Support Center: https://support.squadforsports.com</li> <li>Email: support@squadforsports.com</li> <li>Documentation: https://docs.squadforsports.com</li> </ul>"},{"location":"ios/installation/","title":"iOS Installation &amp; Setup","text":""},{"location":"ios/installation/#requirements","title":"Requirements","text":"<ul> <li>iOS 13.0 or later</li> <li>Xcode 13.0 or later</li> <li>Swift 5.3 or later</li> </ul>"},{"location":"ios/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"ios/installation/#swift-package-manager-recommended","title":"Swift Package Manager (Recommended)","text":"<ol> <li>In Xcode, select File &gt; Add Package Dependencies...</li> <li>Enter the Squad SDK repository URL:</li> </ol> <pre><code>https://github.com/withyoursquad/squad-sports-ios.git\n</code></pre> <ol> <li>Select version settings:</li> <li>Rules: Version - Up to Next Major</li> <li>Version: 1.0.0 or later</li> </ol>"},{"location":"ios/installation/#cocoapods","title":"CocoaPods","text":"<ol> <li>Add the following to your Podfile:</li> </ol> <pre><code>platform :ios, '13.0'\nuse_frameworks!\n\ntarget 'YourApp' do\n  pod 'SquadSDK', '~&gt; 1.0.0'\nend\n</code></pre> <ol> <li>Install the dependency:</li> </ol> <pre><code>pod install\n</code></pre>"},{"location":"ios/installation/#project-setup","title":"Project Setup","text":""},{"location":"ios/installation/#1-required-permissions","title":"1. Required Permissions","text":"<p>Add the following to your <code>Info.plist</code>:</p> <pre><code>&lt;!-- Microphone permission for voice calls --&gt;\n&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;\n&lt;string&gt;Squad needs access to your microphone for voice calls.&lt;/string&gt;\n\n&lt;!-- Camera permission for profile photos (optional) --&gt;\n&lt;key&gt;NSCameraUsageDescription&lt;/key&gt;\n&lt;string&gt;Squad needs access to your camera for profile photos.&lt;/string&gt;\n</code></pre>"},{"location":"ios/installation/#2-background-modes","title":"2. Background Modes","text":"<p>Enable the following capabilities in Xcode:</p> <ol> <li>Go to your target's Signing &amp; Capabilities</li> <li>Click + Capability</li> <li>Add Background Modes</li> <li>Enable:</li> <li>Voice over IP</li> <li>Audio, AirPlay, and Picture in Picture</li> <li>Background fetch</li> </ol>"},{"location":"ios/installation/#3-network-configuration","title":"3. Network Configuration","text":"<p>Add App Transport Security settings to <code>Info.plist</code>:</p> <pre><code>&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;\n&lt;dict&gt;\n    &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;\n    &lt;false/&gt;\n    &lt;key&gt;NSExceptionDomains&lt;/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;squadforsports.com&lt;/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;NSExceptionAllowsInsecureHTTPLoads&lt;/key&gt;\n            &lt;false/&gt;\n            &lt;key&gt;NSExceptionRequiresForwardSecrecy&lt;/key&gt;\n            &lt;true/&gt;\n            &lt;key&gt;NSExceptionMinimumTLSVersion&lt;/key&gt;\n            &lt;string&gt;TLSv1.3&lt;/string&gt;\n            &lt;key&gt;NSIncludesSubdomains&lt;/key&gt;\n            &lt;true/&gt;\n        &lt;/dict&gt;\n    &lt;/dict&gt;\n&lt;/dict&gt;\n</code></pre>"},{"location":"ios/installation/#4-framework-dependencies","title":"4. Framework Dependencies","text":"<p>The Squad SDK requires the following frameworks:</p> <ul> <li>WebKit.framework</li> <li>AVFoundation.framework</li> <li>Network.framework</li> </ul> <p>These are automatically linked when using package managers.</p>"},{"location":"ios/installation/#post-installation-steps","title":"Post-Installation Steps","text":""},{"location":"ios/installation/#1-import-the-sdk","title":"1. Import the SDK","text":"<p>Add the import statement to your source files:</p> <pre><code>import SquadSDK\n</code></pre>"},{"location":"ios/installation/#2-initialize-the-sdk","title":"2. Initialize the SDK","text":"<p>In your <code>AppDelegate</code> or <code>SceneDelegate</code>:</p> <pre><code>func application(_ application: UIApplication,\n                didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {\n    // Initialize Squad SDK\n    do {\n        try SquadSDK.initialize(\n            organizationId: \"YOUR_ORG_ID\",\n            apiKey: \"YOUR_API_KEY\"\n        )\n    } catch {\n        print(\"Squad SDK initialization failed: \\(error)\")\n    }\n    return true\n}\n</code></pre>"},{"location":"ios/installation/#3-verify-installation","title":"3. Verify Installation","text":"<p>Add a test implementation:</p> <pre><code>class ViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        // Verify SDK version\n        print(\"Squad SDK Version: \\(SquadSDK.version)\")\n\n        // Check initialization status\n        if SquadSDK.shared.isInitialized {\n            print(\"Squad SDK initialized successfully\")\n        }\n    }\n}\n</code></pre>"},{"location":"ios/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ios/installation/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Pod Installation Failed</p> </li> <li> <p>Run <code>pod repo update</code></p> </li> <li>Delete Podfile.lock and run <code>pod install</code> again</li> <li> <p>Check minimum iOS version in Podfile</p> </li> <li> <p>SPM Installation Failed</p> </li> <li> <p>Check Xcode version compatibility</p> </li> <li>Clear derived data</li> <li> <p>Update to latest Xcode version</p> </li> <li> <p>Framework Not Found</p> </li> <li>Clean build folder (Cmd + Shift + K)</li> <li>Clean build cache</li> <li>Re-run package manager installation</li> </ol>"},{"location":"ios/installation/#support","title":"Support","text":"<p>For installation issues:</p> <ul> <li>Check our troubleshooting guide</li> <li>Visit our support center</li> <li>Contact support at support@squadforsports.com</li> </ul>"},{"location":"ios/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Configure the SDK using the Configuration Guide</li> <li>Set up user authentication with User Auth Guide</li> <li>Integrate WebView using WebView Management</li> </ul>"},{"location":"ios/optimization/","title":"iOS Build Optimization Guide","text":"<p>This guide covers optimization techniques for reducing app size and improving performance when integrating the Squad SDK.</p>"},{"location":"ios/optimization/#app-size-optimization","title":"App Size Optimization","text":""},{"location":"ios/optimization/#app-thinning","title":"App Thinning","text":"<p>Enable App Thinning in Xcode to reduce the app's size for different devices:</p> <ol> <li>Slicing</li> </ol> <pre><code>// In your project settings:\n// Build Settings &gt; Build Options\nENABLE_BITCODE = NO // Since Xcode 14\nSTRIP_STYLE = all\nDEPLOYMENT_POSTPROCESSING = YES\n</code></pre> <ol> <li>On-Demand Resources    Configure in Xcode:</li> </ol> <pre><code>&lt;!-- Info.plist --&gt;\n&lt;key&gt;NSBundleResourceRequest&lt;/key&gt;\n&lt;dict&gt;\n    &lt;key&gt;NSBundleResourceRequestTag&lt;/key&gt;\n    &lt;string&gt;initial-resources&lt;/string&gt;\n&lt;/dict&gt;\n</code></pre> <ol> <li>Asset Catalog Optimization</li> </ol> <pre><code>// Enable optimization in Build Settings\nASSETCATALOG_COMPILER_OPTIMIZATION = space\nCOMPRESS_PNG_FILES = YES\nSTRIP_PNG_TEXT = YES\n</code></pre>"},{"location":"ios/optimization/#framework-optimization","title":"Framework Optimization","text":"<ol> <li>Link Squad SDK Dynamically</li> </ol> <pre><code># Podfile\nuse_frameworks! :linkage =&gt; :dynamic\n</code></pre> <ol> <li>Enable Link-Time Optimization</li> </ol> <pre><code>// Build Settings\nLLVM_LTO = YES // Aggressive\n</code></pre>"},{"location":"ios/optimization/#build-settings-optimization","title":"Build Settings Optimization","text":""},{"location":"ios/optimization/#release-configuration","title":"Release Configuration","text":"<pre><code>// Build Settings for Release\nSWIFT_COMPILATION_MODE = wholemodule\nSWIFT_OPTIMIZATION_LEVEL = -O\nGCC_OPTIMIZATION_LEVEL = s\n</code></pre>"},{"location":"ios/optimization/#dead-code-stripping","title":"Dead Code Stripping","text":"<pre><code>// Enable dead code stripping\nDEAD_CODE_STRIPPING = YES\nSTRIP_SWIFT_SYMBOLS = YES\n</code></pre>"},{"location":"ios/optimization/#resource-optimization","title":"Resource Optimization","text":""},{"location":"ios/optimization/#image-optimization","title":"Image Optimization","text":"<ol> <li>Asset Catalog Settings</li> </ol> <pre><code>// Enable compression\nCOMPRESS_PNG_FILES = YES\nSTRIP_PNG_TEXT = YES\n\n// Enable on-demand resources\nENABLE_ON_DEMAND_RESOURCES = YES\n</code></pre> <ol> <li>SVG Asset Usage</li> </ol> <pre><code>// Use PDF vectors when possible for resolution independence\n// Asset Catalog: Preserve Vector Data = YES\n</code></pre>"},{"location":"ios/optimization/#string-optimization","title":"String Optimization","text":"<pre><code>// Enable string encryption\nSWIFT_OBFUSCATE_STRINGS = YES // Custom build setting\n\n// Enable constant folding\nSWIFT_OPTIMIZATION_LEVEL = -O\n</code></pre>"},{"location":"ios/optimization/#memory-optimization","title":"Memory Optimization","text":""},{"location":"ios/optimization/#webview-memory-management","title":"WebView Memory Management","text":"<pre><code>class SquadViewController: UIViewController {\n    private func configureWebView() {\n        let config = WKWebViewConfiguration()\n        config.processPool = WKProcessPool()\n        config.websiteDataStore = .nonPersistent()\n\n        // Configure cache\n        let cache = URLCache(\n            memoryCapacity: 10 * 1024 * 1024,  // 10MB\n            diskCapacity: 50 * 1024 * 1024,    // 50MB\n            directory: nil\n        )\n        URLCache.shared = cache\n    }\n}\n</code></pre>"},{"location":"ios/optimization/#memory-warning-handling","title":"Memory Warning Handling","text":"<pre><code>extension SquadViewController {\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n\n        // Clear image caches\n        URLCache.shared.removeAllCachedResponses()\n\n        // Clear WebView cache\n        WKWebsiteDataStore.default().removeData(\n            ofTypes: [.memoryCache],\n            modifiedSince: .distantPast\n        ) { }\n    }\n}\n</code></pre>"},{"location":"ios/optimization/#network-optimization","title":"Network Optimization","text":""},{"location":"ios/optimization/#caching-strategy","title":"Caching Strategy","text":"<pre><code>let cachingConfig = URLSessionConfiguration.default\ncachingConfig.requestCachePolicy = .returnCacheDataElseLoad\ncachingConfig.urlCache = URLCache(\n    memoryCapacity: 10 * 1024 * 1024,\n    diskCapacity: 50 * 1024 * 1024\n)\n</code></pre>"},{"location":"ios/optimization/#image-loading","title":"Image Loading","text":"<pre><code>class ImageOptimizer {\n    static func optimizedImage(_ image: UIImage) -&gt; UIImage? {\n        let data = image.jpegData(compressionQuality: 0.7)\n        return data.flatMap(UIImage.init)\n    }\n}\n</code></pre>"},{"location":"ios/optimization/#debug-optimization","title":"Debug Optimization","text":""},{"location":"ios/optimization/#development-vs-release","title":"Development vs Release","text":"<pre><code>#if DEBUG\n// Development-only code\n#else\n// Release-only optimizations\n#endif\n</code></pre>"},{"location":"ios/optimization/#logging-control","title":"Logging Control","text":"<pre><code>struct OptimizedLogger {\n    static func log(_ message: String) {\n        #if DEBUG\n        print(message)\n        #endif\n    }\n}\n</code></pre>"},{"location":"ios/optimization/#measurement-verification","title":"Measurement &amp; Verification","text":""},{"location":"ios/optimization/#size-analysis","title":"Size Analysis","text":"<ol> <li>Check app size:</li> </ol> <pre><code>xcrun devicespacecraft -size \"App.ipa\"\n</code></pre> <ol> <li>Analyze binary:</li> </ol> <pre><code>xcrun size -m \"YourApp.app/YourApp\"\n</code></pre>"},{"location":"ios/optimization/#performance-metrics","title":"Performance Metrics","text":"<pre><code>class PerformanceMonitor {\n    static func measureMemory() {\n        var info = mach_task_basic_info()\n        var count = mach_msg_type_number_t(MemoryLayout&lt;mach_task_basic_info&gt;.size)/4\n\n        let kerr: kern_return_t = withUnsafeMutablePointer(to: &amp;info) {\n            $0.withMemoryRebound(to: integer_t.self, capacity: 1) {\n                task_info(\n                    mach_task_self_,\n                    task_flavor_t(MACH_TASK_BASIC_INFO),\n                    $0,\n                    &amp;count\n                )\n            }\n        }\n\n        if kerr == KERN_SUCCESS {\n            print(\"Memory used: \\(info.resident_size / 1024 / 1024) MB\")\n        }\n    }\n}\n</code></pre>"},{"location":"ios/optimization/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Build Settings</p> </li> <li> <p>Enable optimization flags</p> </li> <li>Configure proper architecture settings</li> <li> <p>Enable dead code stripping</p> </li> <li> <p>Resource Management</p> </li> <li> <p>Optimize image assets</p> </li> <li>Enable App Thinning</li> <li> <p>Configure caching properly</p> </li> <li> <p>Memory Management</p> </li> <li> <p>Handle memory warnings</p> </li> <li>Implement proper cleanup</li> <li> <p>Monitor memory usage</p> </li> <li> <p>Network Optimization</p> </li> <li>Configure proper caching</li> <li>Optimize request handling</li> <li>Monitor network usage</li> </ol>"},{"location":"ios/optimization/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ios/optimization/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Large App Size</p> </li> <li> <p>Check embedded frameworks</p> </li> <li>Analyze resource usage</li> <li> <p>Verify optimization settings</p> </li> <li> <p>Memory Issues</p> </li> <li>Monitor memory warnings</li> <li>Check for leaks</li> <li>Verify cleanup implementation</li> </ol>"},{"location":"ios/optimization/#related-documentation","title":"Related Documentation","text":"<ul> <li>Installation Guide</li> <li>Configuration Guide</li> <li>WebView Management</li> </ul>"},{"location":"ios/sdk-init/","title":"Squad SDK Initialization for iOS","text":"<p>The Squad SDK initialization process consists of three key steps:</p> <ol> <li>SDK Initialization</li> <li>User Initialization</li> <li>WebView Initialization</li> </ol>"},{"location":"ios/sdk-init/#sdk-initialization","title":"SDK Initialization","text":""},{"location":"ios/sdk-init/#obtaining-credentials","title":"Obtaining Credentials","text":"<ol> <li>Login to your developer account at https://developer.squadforsports.com</li> <li>Navigate to Organization Settings</li> <li>Copy your Organization ID and API Key</li> </ol>"},{"location":"ios/sdk-init/#initialization-code","title":"Initialization Code","text":"<pre><code>import SquadSDK\n\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    var squadSDK: SquadSDK?\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {\n        do {\n            // SDK Initialization\n            squadSDK = SquadSDK(\n                orgId: \"YOUR_ORGANIZATION_ID\",\n                apiKey: \"YOUR_API_KEY\"\n            )\n\n            try squadSDK?.initializeSDK()\n        } catch {\n            print(\"Squad SDK Initialization Error: \\(error)\")\n        }\n\n        return true\n    }\n}\n</code></pre>"},{"location":"ios/sdk-init/#user-initialization","title":"User Initialization","text":""},{"location":"ios/sdk-init/#authentication-methods","title":"Authentication Methods","text":"<p>The Squad SDK supports two primary user initialization methods:</p> <ol> <li>Email Authentication</li> </ol> <pre><code>func initializeUser(email: String) {\n    do {\n        try squadSDK?.initializeUser(\n            identifier: email,\n            authType: .email\n        )\n    } catch {\n        print(\"User Initialization Error: \\(error)\")\n    }\n}\n</code></pre> <ol> <li>Token Authentication</li> </ol> <pre><code>func initializeUser(token: String) {\n    do {\n        try squadSDK?.initializeUser(\n            identifier: token,\n            authType: .token\n        )\n    } catch {\n        print(\"User Initialization Error: \\(error)\")\n    }\n}\n</code></pre>"},{"location":"ios/sdk-init/#webview-initialization","title":"WebView Initialization","text":""},{"location":"ios/sdk-init/#presenting-the-squad-experience","title":"Presenting the Squad Experience","text":"<pre><code>class ViewController: UIViewController {\n    func openSquadExperience() {\n        do {\n            // Ensure SDK and User are initialized first\n            let webViewController = try squadSDK?.presentWebView(\n                configuration: WebViewConfiguration(\n                    features: [\n                        .freestyles,\n                        .polls,\n                        .squadManagement,\n                        .voiceCalling,\n                        .voiceMessages\n                    ]\n                )\n            )\n\n            // Present the web view\n            present(webViewController, animated: true)\n        } catch {\n            print(\"WebView Initialization Error: \\(error)\")\n        }\n    }\n}\n</code></pre>"},{"location":"ios/sdk-init/#complete-initialization-example","title":"Complete Initialization Example","text":"<pre><code>class MyAppViewController: UIViewController {\n    func setupSquadSDK() {\n        // 1. SDK Initialization\n        squadSDK = SquadSDK(\n            orgId: \"your_org_id\",\n            apiKey: \"your_api_key\"\n        )\n\n        // 2. User Initialization\n        try squadSDK?.initializeUser(\n            identifier: currentUser.email,\n            authType: .email\n        )\n\n        // 3. WebView Initialization\n        let squadWebView = try squadSDK?.presentWebView(\n            configuration: WebViewConfiguration(\n                features: [\n                    .freestyles,\n                    .polls,\n                    .squadManagement,\n                    .voiceCalling,\n                    .voiceMessages\n                ]\n            )\n        )\n\n        // Add webView to your view hierarchy\n        view.addSubview(squadWebView)\n    }\n}\n</code></pre>"},{"location":"ios/sdk-init/#error-handling","title":"Error Handling","text":"<pre><code>enum SquadSDKError: Error {\n    case sdkInitializationFailed\n    case userAuthenticationFailed\n    case webViewPresentationFailed\n}\n</code></pre>"},{"location":"ios/sdk-init/#best-practices","title":"Best Practices","text":"<ol> <li>Initialize the SDK as early as possible in your app lifecycle</li> <li>Securely manage user authentication tokens</li> <li>Handle potential initialization errors gracefully</li> <li>Ensure proper user authentication before presenting WebView</li> <li>Keep the SDK updated to the latest version</li> </ol>"},{"location":"ios/sdk-init/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Verify network connectivity</li> <li>Confirm API key and organization ID</li> <li>Ensure user is properly authenticated</li> <li>Check SDK initialization sequence</li> <li>Review error logs</li> <li>Contact Squad developer support if issues persist</li> </ul>"},{"location":"ios/sdk-init/#support","title":"Support","text":"<ul> <li>Documentation: Squad Developer Docs</li> <li>Support Email: support@squadforsports.com</li> </ul> <p>Note: Always refer to the latest documentation for the most up-to-date SDK initialization instructions.</p>"},{"location":"ios/troubleshooting/","title":"iOS Troubleshooting Guide","text":"<p>This guide addresses iOS-specific issues and solutions when integrating the Squad SDK.</p>"},{"location":"ios/troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"ios/troubleshooting/#swift-package-manager","title":"Swift Package Manager","text":""},{"location":"ios/troubleshooting/#issue-package-resolution-failures","title":"Issue: Package Resolution Failures","text":"<pre><code>Error: Unable to resolve package dependencies\n</code></pre> <p>Solutions:</p> <ol> <li>Clear package caches:</li> </ol> <pre><code>rm -rf ~/Library/Caches/org.swift.swiftpm/\n</code></pre> <ol> <li>Reset package resolution:</li> </ol> <pre><code>File &gt; Packages &gt; Reset Package Caches\n</code></pre>"},{"location":"ios/troubleshooting/#cocoapods","title":"CocoaPods","text":""},{"location":"ios/troubleshooting/#issue-pod-installation-failures","title":"Issue: Pod Installation Failures","text":"<pre><code>Error: Unable to find a specification for 'SquadSDK'\n</code></pre> <p>Solutions:</p> <ol> <li>Update CocoaPods repo:</li> </ol> <pre><code>pod repo update\n</code></pre> <ol> <li>Clear CocoaPods cache:</li> </ol> <pre><code>pod cache clean 'SquadSDK'\n</code></pre>"},{"location":"ios/troubleshooting/#build-issues","title":"Build Issues","text":""},{"location":"ios/troubleshooting/#bitcode-errors","title":"Bitcode Errors","text":""},{"location":"ios/troubleshooting/#issue-bitcode-compatibility","title":"Issue: Bitcode Compatibility","text":"<pre><code>Error: Failed to build with bitcode enabled\n</code></pre> <p>Solutions:</p> <ol> <li>Disable Bitcode in build settings:</li> </ol> <pre><code>ENABLE_BITCODE = NO\n</code></pre> <ol> <li>Update project configuration:</li> </ol> <pre><code>post_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['ENABLE_BITCODE'] = 'NO'\n    end\n  end\nend\n</code></pre>"},{"location":"ios/troubleshooting/#architecture-issues","title":"Architecture Issues","text":""},{"location":"ios/troubleshooting/#issue-architecture-mismatch","title":"Issue: Architecture Mismatch","text":"<pre><code>Error: Building for iOS Simulator, but linking against dylib built for iOS\n</code></pre> <p>Solutions:</p> <ol> <li>Check target architectures:</li> </ol> <pre><code>VALID_ARCHS = arm64 x86_64\n</code></pre> <ol> <li>Configure build settings:</li> </ol> <pre><code>ONLY_ACTIVE_ARCH = YES # Debug\nONLY_ACTIVE_ARCH = NO  # Release\n</code></pre>"},{"location":"ios/troubleshooting/#webview-issues","title":"WebView Issues","text":""},{"location":"ios/troubleshooting/#wkwebview-loading","title":"WKWebView Loading","text":""},{"location":"ios/troubleshooting/#issue-content-loading-failures","title":"Issue: Content Loading Failures","text":"<pre><code>Error: WKWebView failed to load content\n</code></pre> <p>Solutions:</p> <ol> <li>Configure WKWebView properly:</li> </ol> <pre><code>let config = WKWebViewConfiguration()\nconfig.allowsInlineMediaPlayback = true\nconfig.mediaTypesRequiringUserActionForPlayback = []\n\nlet webView = WKWebView(frame: .zero, configuration: config)\nwebView.navigationDelegate = self\n</code></pre> <ol> <li>Handle load errors:</li> </ol> <pre><code>func webView(_ webView: WKWebView, didFailProvisionalNavigation: WKNavigation!, withError error: Error) {\n    switch (error as NSError).code {\n    case NSURLErrorNotConnectedToInternet:\n        handleOfflineState()\n    case NSURLErrorTimedOut:\n        retryLoading()\n    default:\n        handleGenericError(error)\n    }\n}\n</code></pre>"},{"location":"ios/troubleshooting/#javascript-bridge","title":"JavaScript Bridge","text":""},{"location":"ios/troubleshooting/#issue-bridge-communication-failures","title":"Issue: Bridge Communication Failures","text":"<pre><code>Error: Unable to communicate with JavaScript bridge\n</code></pre> <p>Solutions:</p> <ol> <li>Verify bridge setup:</li> </ol> <pre><code>let userContentController = WKUserContentController()\nuserContentController.add(self, name: \"squadBridge\")\n\nlet config = WKWebViewConfiguration()\nconfig.userContentController = userContentController\n</code></pre> <ol> <li>Debug bridge messages:</li> </ol> <pre><code>func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) {\n    print(\"Bridge message received: \\(message.body)\")\n    // Handle message\n}\n</code></pre>"},{"location":"ios/troubleshooting/#audio-issues","title":"Audio Issues","text":""},{"location":"ios/troubleshooting/#avaudiosession","title":"AVAudioSession","text":""},{"location":"ios/troubleshooting/#issue-audio-session-configuration","title":"Issue: Audio Session Configuration","text":"<pre><code>Error: Failed to activate audio session\n</code></pre> <p>Solutions:</p> <ol> <li>Configure audio session:</li> </ol> <pre><code>do {\n    try AVAudioSession.sharedInstance().setCategory(\n        .playAndRecord,\n        mode: .voiceChat,\n        options: [.allowBluetooth, .allowBluetoothA2DP]\n    )\n    try AVAudioSession.sharedInstance().setActive(true)\n} catch {\n    print(\"Audio session configuration failed: \\(error)\")\n}\n</code></pre> <ol> <li>Handle interruptions:</li> </ol> <pre><code>NotificationCenter.default.addObserver(\n    self,\n    selector: #selector(handleAudioInterruption),\n    name: AVAudioSession.interruptionNotification,\n    object: nil\n)\n</code></pre>"},{"location":"ios/troubleshooting/#permissions","title":"Permissions","text":""},{"location":"ios/troubleshooting/#issue-microphone-access","title":"Issue: Microphone Access","text":"<pre><code>Error: Microphone access denied\n</code></pre> <p>Solutions:</p> <ol> <li>Check permission status:</li> </ol> <pre><code>AVAudioSession.sharedInstance().requestRecordPermission { granted in\n    if granted {\n        // Handle granted permission\n    } else {\n        // Handle denied permission\n    }\n}\n</code></pre> <ol> <li>Add usage description to Info.plist:</li> </ol> <pre><code>&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;\n&lt;string&gt;Squad needs microphone access for voice calls&lt;/string&gt;\n</code></pre>"},{"location":"ios/troubleshooting/#memory-management","title":"Memory Management","text":""},{"location":"ios/troubleshooting/#memory-warnings","title":"Memory Warnings","text":""},{"location":"ios/troubleshooting/#issue-excessive-memory-usage","title":"Issue: Excessive Memory Usage","text":"<pre><code>Error: Received memory warning\n</code></pre> <p>Solutions:</p> <ol> <li>Implement memory warning handler:</li> </ol> <pre><code>override func didReceiveMemoryWarning() {\n    super.didReceiveMemoryWarning()\n\n    // Clear image caches\n    URLCache.shared.removeAllCachedResponses()\n\n    // Clear WebView cache\n    WKWebsiteDataStore.default().removeData(\n        ofTypes: [.memoryCache],\n        modifiedSince: .distantPast\n    ) { }\n}\n</code></pre> <ol> <li>Monitor memory usage:</li> </ol> <pre><code>class MemoryMonitor {\n    static func logMemoryUsage() {\n        var info = mach_task_basic_info()\n        var count = mach_msg_type_number_t(MemoryLayout&lt;mach_task_basic_info&gt;.size)/4\n\n        let kerr: kern_return_t = withUnsafeMutablePointer(to: &amp;info) {\n            $0.withMemoryRebound(to: integer_t.self, capacity: 1) {\n                task_info(mach_task_self_, task_flavor_t(MACH_TASK_BASIC_INFO), $0, &amp;count)\n            }\n        }\n\n        if kerr == KERN_SUCCESS {\n            let memoryUsedMB = Double(info.resident_size) / 1024.0 / 1024.0\n            print(\"Memory used: \\(memoryUsedMB) MB\")\n        }\n    }\n}\n</code></pre>"},{"location":"ios/troubleshooting/#debug-tools","title":"Debug Tools","text":""},{"location":"ios/troubleshooting/#network-debugging","title":"Network Debugging","text":"<ol> <li>Enable network logging:</li> </ol> <pre><code>SquadSDK.enableNetworkDebugging(true)\n</code></pre> <ol> <li>Monitor requests:</li> </ol> <pre><code>URLSession.shared.configuration.protocolClasses = [DebugProtocol.self]\n</code></pre>"},{"location":"ios/troubleshooting/#console-logging","title":"Console Logging","text":"<p>Configure logging levels:</p> <pre><code>SquadSDK.setLogLevel(\n    .debug,\n    categories: [.network, .webView, .audio]\n)\n</code></pre>"},{"location":"ios/troubleshooting/#related-resources","title":"Related Resources","text":"<ul> <li>General Troubleshooting Guide</li> <li>iOS Configuration Guide</li> <li>iOS WebView Management</li> <li>iOS Build Optimization</li> </ul>"},{"location":"ios/troubleshooting/#support","title":"Support","text":"<p>When contacting support, provide:</p> <ul> <li>Xcode version</li> <li>iOS version</li> <li>Device model</li> <li>SDK version</li> <li>Error logs</li> <li>Steps to reproduce</li> <li>Sample project (if possible)</li> </ul>"},{"location":"ios/user-auth/","title":"User Authentication with Squad SDK for iOS","text":"<p>To access Squad features within your app, users need to be authenticated. The Squad SDK for iOS supports two methods of user authentication: email and access token.</p>"},{"location":"ios/user-auth/#email-authentication","title":"Email Authentication","text":"<p>If your app collects user email addresses, you can use them to authenticate users with the Squad SDK.</p> <p>To authenticate a user using their email address:</p> <pre><code>do {\n    try squadSDK.initializeUser(email: \"user@example.com\")\n    print(\"User initialized successfully\")\n} catch {\n    print(\"Failed to initialize user: \\(error)\")\n}\n</code></pre> <p>Replace <code>\"user@example.com\"</code> with the actual email address of the user you want to authenticate.</p>"},{"location":"ios/user-auth/#access-token-authentication","title":"Access Token Authentication","text":"<p>If your app already has an authentication system in place, you can use access tokens to authenticate users with the Squad SDK.</p> <p>To authenticate a user using an access token:</p> <pre><code>do {\n    try squadSDK.initializeUser(token: \"YOUR_ACCESS_TOKEN\")\n    print(\"User initialized successfully\")\n} catch {\n    print(\"Failed to initialize user: \\(error)\")\n}\n</code></pre> <p>Replace <code>\"YOUR_ACCESS_TOKEN\"</code> with the actual access token obtained from your app's authentication system.</p>"},{"location":"ios/user-auth/#user-management","title":"User Management","text":"<p>The Squad SDK handles user sessions automatically, so you don't need to manage session state yourself. Once a user is initialized, they can access the Squad features seamlessly.</p> <p>If you need to log out a user or switch to a different user, simply call the <code>logoutUser</code> method:</p> <pre><code>squadSDK.logoutUser()\n</code></pre> <p>After logging out a user, you can initialize a new user by calling the <code>initializeUser</code> method again with the appropriate email or access token.</p>"},{"location":"ios/user-auth/#error-handling","title":"Error Handling","text":"<p>When authenticating users, be sure to handle any errors that may occur. The SDK throws errors in case of invalid credentials, network issues, or other authentication failures.</p> <p>You can catch and handle these errors using a <code>do-catch</code> block:</p> <pre><code>do {\n    try squadSDK.initializeUser(email: \"user@example.com\")\n    print(\"User initialized successfully\")\n} catch let error as SquadSDKError {\n    switch error {\n    case .invalidCredentials:\n        print(\"Invalid email or access token\")\n    case .networkError:\n        print(\"Network error occurred\")\n    case .unknownError:\n        print(\"Unknown error occurred\")\n    }\n} catch {\n    print(\"Unexpected error: \\(error)\")\n}\n</code></pre>"},{"location":"ios/user-auth/#next-steps","title":"Next Steps","text":"<ul> <li>Present the Squad WebView to display social features</li> <li>Handle WebView Events</li> <li>Explore Squad Line capabilities</li> <li>Troubleshooting</li> </ul> <p>If you have any questions or need further assistance, please visit our Support Center or contact us at support@squadforsports.com.</p>"},{"location":"ios/webview-events/","title":"Handling WebView Events with Squad SDK for iOS","text":"<p>When using the Squad SDK for iOS, you can listen for various events emitted by the WebView to perform actions or update your app's UI accordingly. This guide will walk you through the process of handling WebView events in your iOS app.</p>"},{"location":"ios/webview-events/#available-events","title":"Available Events","text":"<p>The Squad SDK for iOS emits the following WebView events:</p> <ul> <li><code>webViewDidLoad</code>: Triggered when the WebView finishes loading.</li> <li><code>webViewDidFailToLoad</code>: Triggered when the WebView fails to load due to an error.</li> <li><code>webViewDidDismiss</code>: Triggered when the WebView is dismissed.</li> </ul>"},{"location":"ios/webview-events/#listening-for-events","title":"Listening for Events","text":"<p>To listen for WebView events, you need to conform to the <code>SquadSDKDelegate</code> protocol in your view controller or any other class responsible for managing the Squad SDK.</p> <ol> <li>Declare conformance to the <code>SquadSDKDelegate</code> protocol:</li> </ol> <pre><code>class ViewController: UIViewController, SquadSDKDelegate {\n    // ...\n}\n</code></pre> <ol> <li>Set the <code>delegate</code> property of the <code>SquadSDK</code> instance to <code>self</code>:</li> </ol> <pre><code>squadSDK.delegate = self\n</code></pre> <ol> <li>Implement the desired event handling methods from the <code>SquadSDKDelegate</code> protocol:</li> </ol> <pre><code>func squadSDKWebViewDidLoad(_ squadSDK: SquadSDK) {\n    print(\"WebView loaded successfully\")\n}\n\nfunc squadSDKWebViewDidFailToLoad(_ squadSDK: SquadSDK, error: Error) {\n    print(\"WebView failed to load with error: \\(error)\")\n}\n\nfunc squadSDKWebViewDidDismiss(_ squadSDK: SquadSDK) {\n    print(\"WebView dismissed\")\n}\n</code></pre>"},{"location":"ios/webview-events/#handling-events","title":"Handling Events","text":""},{"location":"ios/webview-events/#webview-loaded","title":"WebView Loaded","text":"<p>The <code>squadSDKWebViewDidLoad</code> method is called when the WebView finishes loading. You can use this event to hide any loading indicators or perform other actions related to the successful loading of the WebView.</p> <pre><code>func squadSDKWebViewDidLoad(_ squadSDK: SquadSDK) {\n    // Hide loading indicator\n    loadingIndicator.stopAnimating()\n\n    // Perform other actions\n    // ...\n}\n</code></pre>"},{"location":"ios/webview-events/#webview-failed-to-load","title":"WebView Failed to Load","text":"<p>The <code>squadSDKWebViewDidFailToLoad</code> method is called when the WebView fails to load due to an error. You can use this event to display an error message to the user or perform error handling logic.</p> <pre><code>func squadSDKWebViewDidFailToLoad(_ squadSDK: SquadSDK, error: Error) {\n    // Display error message\n    let alertController = UIAlertController(title: \"Error\", message: \"Failed to load Squad WebView: \\(error)\", preferredStyle: .alert)\n    alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n    present(alertController, animated: true, completion: nil)\n\n    // Perform error handling\n    // ...\n}\n</code></pre>"},{"location":"ios/webview-events/#webview-dismissed","title":"WebView Dismissed","text":"<p>The <code>squadSDKWebViewDidDismiss</code> method is called when the WebView is dismissed. You can use this event to perform any necessary cleanup or navigation actions.</p> <pre><code>func squadSDKWebViewDidDismiss(_ squadSDK: SquadSDK) {\n    // Perform cleanup\n    // ...\n\n    // Navigate back to the previous screen\n    navigationController?.popViewController(animated: true)\n}\n</code></pre>"},{"location":"ios/webview-events/#next-steps","title":"Next Steps","text":"<ul> <li>Explore Squad Line capabilities</li> <li>Troubleshooting</li> </ul> <p>If you have any questions or need further assistance, please visit our Support Center or contact us at support@squadforsports.com.</p>"},{"location":"ios/webview/","title":"iOS WebView Management","text":""},{"location":"ios/webview/#overview","title":"Overview","text":"<p>The Squad SDK uses WKWebView to provide a seamless integration of Squad features into your iOS application. This guide covers WebView setup, management, and optimization.</p>"},{"location":"ios/webview/#webview-setup","title":"WebView Setup","text":""},{"location":"ios/webview/#basic-implementation","title":"Basic Implementation","text":"<pre><code>class SquadViewController: UIViewController {\n    private var webView: WKWebView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupWebView()\n    }\n\n    private func setupWebView() {\n        let configuration = WKWebViewConfiguration()\n        configuration.allowsInlineMediaPlayback = true\n        configuration.mediaTypesRequiringUserActionForPlayback = []\n\n        // Create WebView\n        webView = WKWebView(frame: view.bounds, configuration: configuration)\n        webView.autoresizingMask = [.flexibleWidth, .flexibleHeight]\n        webView.navigationDelegate = self\n        webView.uiDelegate = self\n\n        view.addSubview(webView)\n    }\n}\n</code></pre>"},{"location":"ios/webview/#custom-configuration","title":"Custom Configuration","text":"<pre><code>extension SquadViewController {\n    private func configureWebView() {\n        let preferences = WKWebpagePreferences()\n        preferences.allowsContentJavaScript = true\n\n        let configuration = WKWebViewConfiguration()\n        configuration.defaultWebpagePreferences = preferences\n\n        // Configure user content controller\n        let controller = WKUserContentController()\n        controller.add(self, name: \"squadBridge\")\n        configuration.userContentController = controller\n\n        // Add custom user scripts\n        let script = WKUserScript(\n            source: bridgeScript,\n            injectionTime: .atDocumentStart,\n            forMainFrameOnly: true\n        )\n        controller.addUserScript(script)\n    }\n}\n</code></pre>"},{"location":"ios/webview/#bridge-communication","title":"Bridge Communication","text":""},{"location":"ios/webview/#javascript-bridge-setup","title":"JavaScript Bridge Setup","text":"<pre><code>extension SquadViewController: WKScriptMessageHandler {\n    // Bridge script for communication\n    private var bridgeScript: String {\n        \"\"\"\n        window.squadBridge = {\n            postMessage: function(message) {\n                window.webkit.messageHandlers.squadBridge.postMessage(message);\n            }\n        };\n        \"\"\"\n    }\n\n    func userContentController(\n        _ userContentController: WKUserContentController,\n        didReceive message: WKScriptMessage\n    ) {\n        guard let body = message.body as? [String: Any] else { return }\n        handleBridgeMessage(body)\n    }\n}\n</code></pre>"},{"location":"ios/webview/#message-handling","title":"Message Handling","text":"<pre><code>extension SquadViewController {\n    private func handleBridgeMessage(_ message: [String: Any]) {\n        guard let type = message[\"type\"] as? String else { return }\n\n        switch type {\n        case \"call\":\n            handleCallEvent(message)\n        case \"navigation\":\n            handleNavigation(message)\n        case \"error\":\n            handleError(message)\n        default:\n            print(\"Unknown message type: \\(type)\")\n        }\n    }\n\n    private func sendToBridge(_ message: [String: Any]) {\n        let jsonData = try? JSONSerialization.data(withJSONObject: message)\n        if let jsonString = String(data: jsonData!, encoding: .utf8) {\n            webView.evaluateJavaScript(\"window.squadBridge.handleNativeMessage(\\(jsonString))\") { _, error in\n                if let error = error {\n                    print(\"Bridge error: \\(error)\")\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"ios/webview/#state-management","title":"State Management","text":""},{"location":"ios/webview/#webview-state-tracking","title":"WebView State Tracking","text":"<pre><code>enum WebViewState {\n    case loading\n    case ready\n    case error(Error)\n}\n\nextension SquadViewController: WKNavigationDelegate {\n    private func updateWebViewState(_ state: WebViewState) {\n        switch state {\n        case .loading:\n            showLoadingIndicator()\n        case .ready:\n            hideLoadingIndicator()\n        case .error(let error):\n            handleWebViewError(error)\n        }\n    }\n\n    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {\n        updateWebViewState(.ready)\n    }\n\n    func webView(_ webView: WKWebView, didFail navigation: WKNavigation!, withError error: Error) {\n        updateWebViewState(.error(error))\n    }\n}\n</code></pre>"},{"location":"ios/webview/#session-management","title":"Session Management","text":"<pre><code>extension SquadViewController {\n    private func handleSession() {\n        // Configure cookies and storage\n        let dataStore = WKWebsiteDataStore.default()\n        dataStore.httpCookieStore.getAllCookies { cookies in\n            // Handle cookies\n        }\n\n        // Clear session if needed\n        let types = WKWebsiteDataStore.allWebsiteDataTypes()\n        dataStore.removeData(ofTypes: types, modifiedSince: .distantPast) {\n            // Session cleared\n        }\n    }\n}\n</code></pre>"},{"location":"ios/webview/#security-implementation","title":"Security Implementation","text":""},{"location":"ios/webview/#content-security-policy","title":"Content Security Policy","text":"<pre><code>extension SquadViewController {\n    private func configureSecurityPolicy() {\n        let cspScript = WKUserScript(\n            source: \"\"\"\n            const meta = document.createElement('meta');\n            meta.httpEquiv = 'Content-Security-Policy';\n            meta.content = \"default-src 'self' https://*.squadforsports.com; \\\n                          script-src 'self' 'unsafe-inline' https://*.squadforsports.com; \\\n                          style-src 'self' 'unsafe-inline' https://*.squadforsports.com; \\\n                          img-src 'self' data: https://*.squadforsports.com;\";\n            document.head.appendChild(meta);\n            \"\"\",\n            injectionTime: .atDocumentStart,\n            forMainFrameOnly: true\n        )\n        webView.configuration.userContentController.addUserScript(cspScript)\n    }\n}\n</code></pre>"},{"location":"ios/webview/#input-validation","title":"Input Validation","text":"<pre><code>extension SquadViewController {\n    private func validateMessage(_ message: [String: Any]) -&gt; Bool {\n        guard\n            let type = message[\"type\"] as? String,\n            let data = message[\"data\"] as? [String: Any]\n        else {\n            return false\n        }\n\n        // Validate message contents\n        switch type {\n        case \"call\":\n            return validateCallMessage(data)\n        case \"navigation\":\n            return validateNavigationMessage(data)\n        default:\n            return false\n        }\n    }\n}\n</code></pre>"},{"location":"ios/webview/#performance-optimization","title":"Performance Optimization","text":""},{"location":"ios/webview/#memory-management","title":"Memory Management","text":"<pre><code>extension SquadViewController {\n    private func optimizeMemoryUsage() {\n        // Configure process pool\n        let processPool = WKProcessPool()\n        webView.configuration.processPool = processPool\n\n        // Handle memory warnings\n        NotificationCenter.default.addObserver(\n            self,\n            selector: #selector(handleMemoryWarning),\n            name: UIApplication.didReceiveMemoryWarningNotification,\n            object: nil\n        )\n    }\n\n    @objc private func handleMemoryWarning() {\n        // Clear unused resources\n        URLCache.shared.removeAllCachedResponses()\n        webView.configuration.websiteDataStore.removeData(\n            ofTypes: [.memoryCache],\n            modifiedSince: .distantPast\n        ) {\n            print(\"Memory cache cleared\")\n        }\n    }\n}\n</code></pre>"},{"location":"ios/webview/#resource-loading-optimization","title":"Resource Loading Optimization","text":"<pre><code>extension SquadViewController: WKNavigationDelegate {\n    func webView(\n        _ webView: WKWebView,\n        decidePolicyFor navigationAction: WKNavigationAction,\n        decisionHandler: @escaping (WKNavigationActionPolicy) -&gt; Void\n    ) {\n        // Implement caching strategy\n        if let url = navigationAction.request.url {\n            if shouldLoadFromCache(url) {\n                loadFromCache(url)\n                decisionHandler(.cancel)\n                return\n            }\n        }\n        decisionHandler(.allow)\n    }\n\n    private func shouldLoadFromCache(_ url: URL) -&gt; Bool {\n        // Implement caching logic\n        return false\n    }\n}\n</code></pre>"},{"location":"ios/webview/#error-handling","title":"Error Handling","text":""},{"location":"ios/webview/#webview-error-management","title":"WebView Error Management","text":"<pre><code>extension SquadViewController {\n    private func handleWebViewError(_ error: Error) {\n        // Analyze error type\n        switch error {\n        case let urlError as URLError:\n            handleURLError(urlError)\n        case let webError as WKError:\n            handleWebKitError(webError)\n        default:\n            handleGenericError(error)\n        }\n    }\n\n    private func handleURLError(_ error: URLError) {\n        switch error.code {\n        case .notConnectedToInternet:\n            showOfflineView()\n        case .timedOut:\n            retryLoading()\n        default:\n            showErrorView(message: error.localizedDescription)\n        }\n    }\n}\n</code></pre>"},{"location":"ios/webview/#lifecycle-management","title":"Lifecycle Management","text":""},{"location":"ios/webview/#view-controller-lifecycle","title":"View Controller Lifecycle","text":"<pre><code>extension SquadViewController {\n    override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(animated)\n        setupObservers()\n    }\n\n    override func viewDidDisappear(_ animated: Bool) {\n        super.viewDidDisappear(animated)\n        removeObservers()\n        pauseWebView()\n    }\n\n    private func pauseWebView() {\n        webView.evaluateJavaScript(\"document.hidden = true;\")\n    }\n}\n</code></pre>"},{"location":"ios/webview/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Security</p> </li> <li> <p>Implement proper CSP</p> </li> <li>Validate all bridge messages</li> <li>Use secure content only</li> <li> <p>Handle authentication properly</p> </li> <li> <p>Performance</p> </li> <li> <p>Optimize memory usage</p> </li> <li>Implement efficient caching</li> <li>Handle lifecycle events</li> <li> <p>Clear resources when appropriate</p> </li> <li> <p>User Experience</p> </li> <li> <p>Handle offline state gracefully</p> </li> <li>Provide loading indicators</li> <li>Implement proper error handling</li> <li> <p>Maintain state consistency</p> </li> <li> <p>Debugging</p> </li> <li>Enable WKWebView logging</li> <li>Monitor memory usage</li> <li>Track performance metrics</li> <li>Log bridge communications</li> </ol>"},{"location":"ios/webview/#related-documentation","title":"Related Documentation","text":"<ul> <li>Configuration Guide</li> <li>Troubleshooting</li> </ul>"},{"location":"react-native/getting-started/","title":"Coming Soon","text":""},{"location":"resources/faq/","title":"Frequently Asked Questions","text":""},{"location":"resources/faq/#general-questions","title":"General Questions","text":""},{"location":"resources/faq/#what-platforms-does-the-squad-sdk-support","title":"What platforms does the Squad SDK support?","text":"<p>The Squad SDK currently supports iOS and Android platforms, with React Native support coming soon. Each platform has its own specific SDK version optimized for that environment.</p>"},{"location":"resources/faq/#what-are-the-minimum-platform-requirements","title":"What are the minimum platform requirements?","text":"<ul> <li>iOS: iOS 13.0 or later, Xcode 13.0+</li> <li>Android: API Level 21 (Android 5.0) or higher, Android Studio Arctic Fox or newer</li> </ul>"},{"location":"resources/faq/#how-do-i-get-api-credentials","title":"How do I get API credentials?","text":"<ol> <li>Create a developer account at developer.squadforsports.com</li> <li>Navigate to Organization Settings</li> <li>Generate your organization ID and API key</li> </ol>"},{"location":"resources/faq/#is-the-sdk-free-to-use","title":"Is the SDK free to use?","text":"<p>Contact our sales team for pricing information and to discuss your specific needs.</p>"},{"location":"resources/faq/#integration-questions","title":"Integration Questions","text":""},{"location":"resources/faq/#how-long-does-integration-typically-take","title":"How long does integration typically take?","text":"<p>Basic integration can be completed in 1-2 days. More complex integrations with custom features may take longer depending on requirements.</p>"},{"location":"resources/faq/#can-i-customize-the-ui","title":"Can I customize the UI?","text":"<p>The Squad SDK provides a standard WebView interface that maintains consistency across apps. Limited customization options are available through configuration parameters.</p>"},{"location":"resources/faq/#how-do-i-handle-deep-linking","title":"How do I handle deep linking?","text":"<p>The SDK supports deep linking through platform-specific implementations. Refer to our iOS or Android deep linking guides.</p>"},{"location":"resources/faq/#can-i-use-the-sdk-in-multiple-apps","title":"Can I use the SDK in multiple apps?","text":"<p>Yes, you can use the SDK in multiple apps under the same organization. Each app should use its own API credentials.</p>"},{"location":"resources/faq/#technical-questions","title":"Technical Questions","text":""},{"location":"resources/faq/#how-does-authentication-work","title":"How does authentication work?","text":"<p>The SDK supports two authentication methods:</p> <ol> <li>Email-based authentication</li> <li>Token-based authentication</li> </ol> <p>Refer to our Authentication Guide for details.</p>"},{"location":"resources/faq/#what-happens-if-the-connection-is-lost","title":"What happens if the connection is lost?","text":"<p>The SDK automatically handles connection loss and attempts to reconnect. You can configure retry policies and implement custom error handling.</p>"},{"location":"resources/faq/#how-do-i-handle-background-state","title":"How do I handle background state?","text":"<p>The SDK provides methods to handle background states:</p> <ul> <li>iOS: Background modes and state restoration</li> <li>Android: Service lifecycle and process management</li> </ul>"},{"location":"resources/faq/#what-about-memory-management","title":"What about memory management?","text":"<p>The SDK includes built-in memory management features:</p> <ul> <li>Automatic cache clearing</li> <li>Memory warning handlers</li> <li>Resource cleanup utilities</li> </ul>"},{"location":"resources/faq/#voice-calling-questions","title":"Voice Calling Questions","text":""},{"location":"resources/faq/#what-audio-codecs-are-supported","title":"What audio codecs are supported?","text":"<p>The SDK uses Opus codec for optimal voice quality and supports various bitrates and modes.</p>"},{"location":"resources/faq/#how-does-the-sdk-handle-poor-network-conditions","title":"How does the SDK handle poor network conditions?","text":"<p>The SDK includes adaptive bitrate handling and automatic quality adjustment based on network conditions.</p>"},{"location":"resources/faq/#can-users-send-emojis-during-calls","title":"Can users send emojis during calls?","text":"<p>Yes, the SDK supports custom emojis and reactions during voice calls.</p>"},{"location":"resources/faq/#security-questions","title":"Security Questions","text":""},{"location":"resources/faq/#how-is-user-data-protected","title":"How is user data protected?","text":"<ul> <li>End-to-end encryption for voice calls</li> <li>Secure storage for user data</li> <li>Certificate pinning for network requests</li> <li>Compliance with data protection regulations</li> </ul>"},{"location":"resources/faq/#does-the-sdk-support-certificate-pinning","title":"Does the SDK support certificate pinning?","text":"<p>Yes, certificate pinning is supported and recommended for production environments. See our Security Guide.</p>"},{"location":"resources/faq/#performance-questions","title":"Performance Questions","text":""},{"location":"resources/faq/#what-is-the-impact-on-app-size","title":"What is the impact on app size?","text":"<p>Approximate size impact:</p> <ul> <li>iOS: 2-3 MB</li> <li>Android: 3-4 MB</li> </ul>"},{"location":"resources/faq/#how-is-battery-usage-optimized","title":"How is battery usage optimized?","text":"<p>The SDK includes various optimizations:</p> <ul> <li>Efficient audio processing</li> <li>Smart background handling</li> <li>Resource management</li> <li>Power-aware features</li> </ul>"},{"location":"resources/faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"resources/faq/#where-can-i-find-error-logs","title":"Where can I find error logs?","text":"<ul> <li>iOS: Console.app or Xcode console</li> <li>Android: Logcat with tag \"SquadSDK\"</li> </ul>"},{"location":"resources/faq/#common-error-codes","title":"Common error codes:","text":"<ul> <li>1001: Authentication failed</li> <li>1002: Network error</li> <li>1003: WebView error</li> <li>1004: Permission denied</li> </ul> <p>For detailed error handling, see our Troubleshooting Guide.</p>"},{"location":"resources/faq/#updates-and-maintenance","title":"Updates and Maintenance","text":""},{"location":"resources/faq/#how-often-is-the-sdk-updated","title":"How often is the SDK updated?","text":"<p>We release updates monthly with bug fixes and quarterly with feature updates.</p>"},{"location":"resources/faq/#how-do-i-update-the-sdk","title":"How do I update the SDK?","text":"<ul> <li>iOS: Update through SPM or CocoaPods</li> <li>Android: Update Gradle dependency</li> </ul>"},{"location":"resources/faq/#is-there-a-changelog","title":"Is there a changelog?","text":"<p>Yes, check our Release Notes for detailed changelog.</p>"},{"location":"resources/faq/#support","title":"Support","text":""},{"location":"resources/faq/#how-do-i-get-help","title":"How do I get help?","text":"<ol> <li>Check our documentation</li> <li>Visit our support portal</li> <li>Contact support@squadforsports.com</li> </ol>"},{"location":"resources/faq/#what-information-should-i-provide-when-seeking-support","title":"What information should I provide when seeking support?","text":"<ul> <li>SDK version</li> <li>Platform details</li> <li>Error logs</li> <li>Steps to reproduce</li> <li>Sample code (if applicable)</li> </ul>"},{"location":"resources/faq/#additional-resources","title":"Additional Resources","text":"<ul> <li>Documentation Home</li> <li>Sample Projects</li> <li>Support Contact</li> </ul>"},{"location":"resources/support/","title":"Coming Soon","text":""}]}